                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12539 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _superuser_hold
                                     13 	.globl _start_test
                                     14 	.globl _display_menu
                                     15 	.globl _move_menu_arrow
                                     16 	.globl _display_menu_arrow
                                     17 	.globl _display_menu_bg
                                     18 	.globl _superuser_enter_hostmode
                                     19 	.globl _send_data_str
                                     20 	.globl _wait_for_start
                                     21 	.globl _toggleRumble
                                     22 	.globl _gblink_test
                                     23 	.globl _audio_test
                                     24 	.globl _button_test
                                     25 	.globl _display_test
                                     26 	.globl _show_gblink_background
                                     27 	.globl _ask_user_pass_or_fail
                                     28 	.globl _blank_display
                                     29 	.globl _text_load_font
                                     30 	.globl _mem_test
                                     31 	.globl _save_test_result
                                     32 	.globl _check_savemem
                                     33 	.globl _set_sprite_palette
                                     34 	.globl _set_bkg_palette
                                     35 	.globl _initarand
                                     36 	.globl _puts
                                     37 	.globl _printf
                                     38 	.globl _cls
                                     39 	.globl _EMU_printf
                                     40 	.globl _set_sprite_data
                                     41 	.globl _set_bkg_tiles
                                     42 	.globl _set_bkg_data
                                     43 	.globl _wait_vbl_done
                                     44 	.globl _reset
                                     45 	.globl _set_interrupts
                                     46 	.globl _waitpadup
                                     47 	.globl _joypad
                                     48 	.globl _delay
                                     49 	.globl _receive_byte
                                     50 	.globl _send_byte
                                     51 	.globl _CURRENT_INDEX
                                     52 	.globl _MENU_INDEX_MAX
                                     53 	.globl _MENU_ARROW_X_FOR_INDEX
                                     54 	.globl _MENU_ARROW_START_Y
                                     55 	.globl _MENU_ARROW_START_X
                                     56 	.globl _rng_seed
                                     57 	.globl _test_data_str
                                     58 ;--------------------------------------------------------
                                     59 ; special function registers
                                     60 ;--------------------------------------------------------
                                     61 ;--------------------------------------------------------
                                     62 ; ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area _DATA
      000000                         65 _rng_seed::
      000000                         66 	.ds 2
                                     67 ;--------------------------------------------------------
                                     68 ; ram data
                                     69 ;--------------------------------------------------------
                                     70 	.area _INITIALIZED
      000000                         71 ___EMU_PROFILER_INIT:
      000000                         72 	.ds 2
      000002                         73 _MENU_ARROW_START_X::
      000002                         74 	.ds 1
      000003                         75 _MENU_ARROW_START_Y::
      000003                         76 	.ds 1
      000004                         77 _MENU_ARROW_X_FOR_INDEX::
      000004                         78 	.ds 6
      00000A                         79 _MENU_INDEX_MAX::
      00000A                         80 	.ds 1
      00000B                         81 _CURRENT_INDEX::
      00000B                         82 	.ds 1
                                     83 ;--------------------------------------------------------
                                     84 ; absolute external ram data
                                     85 ;--------------------------------------------------------
                                     86 	.area _DABS (ABS)
                                     87 ;--------------------------------------------------------
                                     88 ; global & static initialisations
                                     89 ;--------------------------------------------------------
                                     90 	.area _HOME
                                     91 	.area _GSINIT
                                     92 	.area _GSFINAL
                                     93 	.area _GSINIT
                                     94 ;--------------------------------------------------------
                                     95 ; Home
                                     96 ;--------------------------------------------------------
                                     97 	.area _HOME
                                     98 	.area _HOME
                                     99 ;--------------------------------------------------------
                                    100 ; code
                                    101 ;--------------------------------------------------------
                                    102 	.area _CODE
                                    103 ;src/main.c:31: int toggleRumble()
                                    104 ;	---------------------------------
                                    105 ; Function toggleRumble
                                    106 ; ---------------------------------
      000000                        107 _toggleRumble::
                                    108 ;src/main.c:33: return (*(uint8_t*)0x4000 ^ (1 << (3 - 1)));
      000000 FA 00 40               109 	ld	a, (#0x4000)
      000003 EE 04                  110 	xor	a, #0x04
      000005 5F                     111 	ld	e, a
      000006 16 00                  112 	ld	d, #0x00
                                    113 ;src/main.c:34: }
      000008 C9                     114 	ret
                                    115 ;src/main.c:50: void wait_for_start() 
                                    116 ;	---------------------------------
                                    117 ; Function wait_for_start
                                    118 ; ---------------------------------
      000009                        119 _wait_for_start::
      000009 E8 FA                  120 	add	sp, #-6
                                    121 ;src/main.c:52: UBYTE start[4] = { 0x73, 0x74, 0x72, 0x74 };
      00000B F8 00                  122 	ldhl	sp,	#0
      00000D 7D                     123 	ld	a, l
      00000E 54                     124 	ld	d, h
      00000F F8 04                  125 	ldhl	sp,	#4
      000011 22                     126 	ld	(hl+), a
      000012 7A                     127 	ld	a, d
      000013 32                     128 	ld	(hl-), a
      000014 2A                     129 	ld	a,	(hl+)
      000015 66                     130 	ld	h, (hl)
      000016 6F                     131 	ld	l, a
      000017 36 73                  132 	ld	(hl), #0x73
      000019 F8 04                  133 	ldhl	sp,	#4
      00001B 2A                     134 	ld	a, (hl+)
      00001C 4F                     135 	ld	c, a
      00001D 3A                     136 	ld	a, (hl-)
      00001E 47                     137 	ld	b, a
      00001F 03                     138 	inc	bc
      000020 3E 74                  139 	ld	a, #0x74
      000022 02                     140 	ld	(bc), a
      000023 2A                     141 	ld	a, (hl+)
      000024 4F                     142 	ld	c, a
      000025 3A                     143 	ld	a, (hl-)
      000026 47                     144 	ld	b, a
      000027 03                     145 	inc	bc
      000028 03                     146 	inc	bc
      000029 3E 72                  147 	ld	a, #0x72
      00002B 02                     148 	ld	(bc), a
      00002C 2A                     149 	ld	a, (hl+)
      00002D 4F                     150 	ld	c, a
      00002E 46                     151 	ld	b, (hl)
      00002F 03                     152 	inc	bc
      000030 03                     153 	inc	bc
      000031 03                     154 	inc	bc
      000032 3E 74                  155 	ld	a, #0x74
      000034 02                     156 	ld	(bc), a
                                    157 ;src/main.c:54: for (int i = 0; i < 4; ++i)
      000035 01 00 00               158 	ld	bc, #0x0000
      000038                        159 00110$:
      000038 79                     160 	ld	a, c
      000039 D6 04                  161 	sub	a, #0x04
      00003B 78                     162 	ld	a, b
      00003C 17                     163 	rla
      00003D 3F                     164 	ccf
      00003E 1F                     165 	rra
      00003F DE 80                  166 	sbc	a, #0x80
      000041 30 42                  167 	jr	NC, 00108$
                                    168 ;src/main.c:56: receive_byte();
      000043 C5                     169 	push	bc
      000044 CDr00r00               170 	call	_receive_byte
      000047 C1                     171 	pop	bc
                                    172 ;src/main.c:58: while (_io_status == IO_RECEIVING);
      000048                        173 00101$:
      000048 FAr00r00               174 	ld	a, (#__io_status)
      00004B D6 02                  175 	sub	a, #0x02
      00004D 28 F9                  176 	jr	Z, 00101$
                                    177 ;src/main.c:59: if (_io_status == IO_ERROR) {
      00004F FAr00r00               178 	ld	a, (#__io_status)
      000052 D6 04                  179 	sub	a, #0x04
      000054 20 0A                  180 	jr	NZ, 00105$
                                    181 ;src/main.c:60: printf("i/o error!\n");
      000056 11rABr00               182 	ld	de, #___str_1
      000059 D5                     183 	push	de
      00005A CDr00r00               184 	call	_puts
      00005D E1                     185 	pop	hl
                                    186 ;src/main.c:61: break;
      00005E 18 25                  187 	jr	00108$
      000060                        188 00105$:
                                    189 ;src/main.c:63: if (_io_in == start[i]) {
      000060 F8 04                  190 	ldhl	sp,	#4
      000062 2A                     191 	ld	a,	(hl+)
      000063 66                     192 	ld	h, (hl)
      000064 6F                     193 	ld	l, a
      000065 09                     194 	add	hl, bc
      000066 5D                     195 	ld	e, l
      000067 54                     196 	ld	d, h
      000068 1A                     197 	ld	a, (de)
      000069 5F                     198 	ld	e, a
      00006A FAr00r00               199 	ld	a, (#__io_in)
      00006D 93                     200 	sub	a, e
      00006E 20 12                  201 	jr	NZ, 00111$
                                    202 ;src/main.c:64: printf("%c", _io_in);
      000070 21r00r00               203 	ld	hl, #__io_in
      000073 5E                     204 	ld	e, (hl)
      000074 16 00                  205 	ld	d, #0x00
      000076 C5                     206 	push	bc
      000077 D5                     207 	push	de
      000078 11rB6r00               208 	ld	de, #___str_2
      00007B D5                     209 	push	de
      00007C CDr00r00               210 	call	_printf
      00007F E8 04                  211 	add	sp, #4
      000081 C1                     212 	pop	bc
      000082                        213 00111$:
                                    214 ;src/main.c:54: for (int i = 0; i < 4; ++i)
      000082 03                     215 	inc	bc
      000083 18 B3                  216 	jr	00110$
      000085                        217 00108$:
                                    218 ;src/main.c:67: printf("\n"); 
      000085 11rB9r00               219 	ld	de, #___str_4
      000088 D5                     220 	push	de
      000089 CDr00r00               221 	call	_puts
      00008C E1                     222 	pop	hl
                                    223 ;src/main.c:68: }
      00008D E8 06                  224 	add	sp, #6
      00008F C9                     225 	ret
      000090                        226 _test_data_str:
      000090 46                     227 	.db #0x46	; 70	'F'
      000091 49                     228 	.db #0x49	; 73	'I'
      000092 53                     229 	.db #0x53	; 83	'S'
      000093 43                     230 	.db #0x43	; 67	'C'
      000094 48                     231 	.db #0x48	; 72	'H'
      000095 53                     232 	.db #0x53	; 83	'S'
      000096 44                     233 	.db #0x44	; 68	'D'
      000097 49                     234 	.db #0x49	; 73	'I'
      000098 41                     235 	.db #0x41	; 65	'A'
      000099 47                     236 	.db #0x47	; 71	'G'
      00009A 53                     237 	.db #0x53	; 83	'S'
      00009B 43                     238 	.db #0x43	; 67	'C'
      00009C 4F                     239 	.db #0x4f	; 79	'O'
      00009D 4D                     240 	.db #0x4d	; 77	'M'
      00009E 4D                     241 	.db #0x4d	; 77	'M'
      00009F 54                     242 	.db #0x54	; 84	'T'
      0000A0 45                     243 	.db #0x45	; 69	'E'
      0000A1 53                     244 	.db #0x53	; 83	'S'
      0000A2 54                     245 	.db #0x54	; 84	'T'
      0000A3 44                     246 	.db #0x44	; 68	'D'
      0000A4 41                     247 	.db #0x41	; 65	'A'
      0000A5 54                     248 	.db #0x54	; 84	'T'
      0000A6 41                     249 	.db #0x41	; 65	'A'
      0000A7 4C                     250 	.db #0x4c	; 76	'L'
      0000A8 49                     251 	.db #0x49	; 73	'I'
      0000A9 4E                     252 	.db #0x4e	; 78	'N'
      0000AA 4B                     253 	.db #0x4b	; 75	'K'
      0000AB                        254 ___str_1:
      0000AB 69 2F 6F 20 65 72 72   255 	.ascii "i/o error!"
             6F 72 21
      0000B5 00                     256 	.db 0x00
      0000B6                        257 ___str_2:
      0000B6 25 63                  258 	.ascii "%c"
      0000B8 00                     259 	.db 0x00
      0000B9                        260 ___str_4:
      0000B9 00                     261 	.db 0x00
                                    262 ;src/main.c:70: void send_data_str() 
                                    263 ;	---------------------------------
                                    264 ; Function send_data_str
                                    265 ; ---------------------------------
      0000BA                        266 _send_data_str::
      0000BA 3B                     267 	dec	sp
                                    268 ;src/main.c:72: for (int i = 0; i < 0x20; ++i)
      0000BB 01 00 00               269 	ld	bc, #0x0000
      0000BE                        270 00111$:
      0000BE 79                     271 	ld	a, c
      0000BF D6 20                  272 	sub	a, #0x20
      0000C1 78                     273 	ld	a, b
      0000C2 17                     274 	rla
      0000C3 3F                     275 	ccf
      0000C4 1F                     276 	rra
      0000C5 DE 80                  277 	sbc	a, #0x80
      0000C7 30 5B                  278 	jr	NC, 00109$
                                    279 ;src/main.c:74: _io_out = test_data_str[i];
      0000C9 21r90r00               280 	ld	hl, #_test_data_str
      0000CC 09                     281 	add	hl, bc
      0000CD 7E                     282 	ld	a, (hl)
      0000CE EAr00r00               283 	ld	(#__io_out),a
                                    284 ;src/main.c:75: send_byte();
      0000D1 C5                     285 	push	bc
      0000D2 CDr00r00               286 	call	_send_byte
      0000D5 C1                     287 	pop	bc
                                    288 ;src/main.c:76: while(_io_status == IO_SENDING);
      0000D6                        289 00101$:
      0000D6 FAr00r00               290 	ld	a, (#__io_status)
      0000D9 3D                     291 	dec	a
      0000DA 28 FA                  292 	jr	Z, 00101$
                                    293 ;src/main.c:77: if (_io_status == IO_ERROR) {
      0000DC FAr00r00               294 	ld	a, (#__io_status)
      0000DF D6 04                  295 	sub	a, #0x04
      0000E1 20 0A                  296 	jr	NZ, 00105$
                                    297 ;src/main.c:78: printf("i/o error!\n");
      0000E3 11r2Er01               298 	ld	de, #___str_6
      0000E6 D5                     299 	push	de
      0000E7 CDr00r00               300 	call	_puts
      0000EA E1                     301 	pop	hl
                                    302 ;src/main.c:79: break;
      0000EB 18 37                  303 	jr	00109$
      0000ED                        304 00105$:
                                    305 ;src/main.c:81: if (test_data_str[i] == 0x20) {
      0000ED 21r90r00               306 	ld	hl, #_test_data_str
      0000F0 09                     307 	add	hl, bc
      0000F1 7E                     308 	ld	a, (hl)
      0000F2 F8 00                  309 	ldhl	sp,#0
      0000F4 77                     310 	ld	(hl), a
      0000F5 7E                     311 	ld	a, (hl)
      0000F6 D6 20                  312 	sub	a, #0x20
      0000F8 20 0C                  313 	jr	NZ, 00107$
                                    314 ;src/main.c:82: printf("\n");
      0000FA C5                     315 	push	bc
      0000FB 11r39r01               316 	ld	de, #___str_8
      0000FE D5                     317 	push	de
      0000FF CDr00r00               318 	call	_puts
      000102 E1                     319 	pop	hl
      000103 C1                     320 	pop	bc
      000104 18 11                  321 	jr	00108$
      000106                        322 00107$:
                                    323 ;src/main.c:84: printf("%c", test_data_str[i]);
      000106 F8 00                  324 	ldhl	sp,	#0
      000108 5E                     325 	ld	e, (hl)
      000109 16 00                  326 	ld	d, #0x00
      00010B C5                     327 	push	bc
      00010C D5                     328 	push	de
      00010D 11r3Ar01               329 	ld	de, #___str_9
      000110 D5                     330 	push	de
      000111 CDr00r00               331 	call	_printf
      000114 E8 04                  332 	add	sp, #4
      000116 C1                     333 	pop	bc
      000117                        334 00108$:
                                    335 ;src/main.c:86: delay(100);
      000117 C5                     336 	push	bc
      000118 11 64 00               337 	ld	de, #0x0064
      00011B D5                     338 	push	de
      00011C CDr00r00               339 	call	_delay
      00011F E1                     340 	pop	hl
      000120 C1                     341 	pop	bc
                                    342 ;src/main.c:72: for (int i = 0; i < 0x20; ++i)
      000121 03                     343 	inc	bc
      000122 18 9A                  344 	jr	00111$
      000124                        345 00109$:
                                    346 ;src/main.c:88: printf("\n"); 
      000124 11r39r01               347 	ld	de, #___str_8
      000127 D5                     348 	push	de
      000128 CDr00r00               349 	call	_puts
      00012B E1                     350 	pop	hl
                                    351 ;src/main.c:89: }
      00012C 33                     352 	inc	sp
      00012D C9                     353 	ret
      00012E                        354 ___str_6:
      00012E 69 2F 6F 20 65 72 72   355 	.ascii "i/o error!"
             6F 72 21
      000138 00                     356 	.db 0x00
      000139                        357 ___str_8:
      000139 00                     358 	.db 0x00
      00013A                        359 ___str_9:
      00013A 25 63                  360 	.ascii "%c"
      00013C 00                     361 	.db 0x00
                                    362 ;src/main.c:91: void superuser_enter_hostmode() 
                                    363 ;	---------------------------------
                                    364 ; Function superuser_enter_hostmode
                                    365 ; ---------------------------------
      00013D                        366 _superuser_enter_hostmode::
                                    367 ;src/main.c:93: PRINT_FUNC_INFO;
      00013D 11rACr01               368 	ld	de, #___str_13
      000140 D5                     369 	push	de
      000141 11 5D 00               370 	ld	de, #0x005d
      000144 D5                     371 	push	de
      000145 11rA1r01               372 	ld	de, #___str_12
      000148 D5                     373 	push	de
      000149 11r8Cr01               374 	ld	de, #___str_11
      00014C D5                     375 	push	de
      00014D CDr00r00               376 	call	_EMU_printf
      000150 E8 08                  377 	add	sp, #8
                                    378 ;src/main.c:94: blank_display();
      000152 CDr00r00               379 	call	_blank_display
                                    380 ;src/main.c:95: show_gblink_background();
      000155 CDr00r00               381 	call	_show_gblink_background
                                    382 ;src/main.c:96: text_load_font();
      000158 CDr00r00               383 	call	_text_load_font
                                    384 ;src/main.c:97: wait_vbl_done();
      00015B CDr00r00               385 	call	_wait_vbl_done
                                    386 ;src/main.c:99: while(1) {
      00015E                        387 00102$:
                                    388 ;src/main.c:100: cls();
      00015E CDr00r00               389 	call	_cls
                                    390 ;src/main.c:101: printf("\n\nwaiting for init\n");
      000161 11rC5r01               391 	ld	de, #___str_15
      000164 D5                     392 	push	de
      000165 CDr00r00               393 	call	_puts
      000168 E1                     394 	pop	hl
                                    395 ;src/main.c:102: wait_for_start();
      000169 CDr09r00               396 	call	_wait_for_start
                                    397 ;src/main.c:103: printf("received init!\nsending big string\n");
      00016C 11rD8r01               398 	ld	de, #___str_17
      00016F D5                     399 	push	de
      000170 CDr00r00               400 	call	_puts
      000173 E1                     401 	pop	hl
                                    402 ;src/main.c:104: delay(100);
      000174 11 64 00               403 	ld	de, #0x0064
      000177 D5                     404 	push	de
      000178 CDr00r00               405 	call	_delay
      00017B E1                     406 	pop	hl
                                    407 ;src/main.c:105: send_data_str();
      00017C CDrBAr00               408 	call	_send_data_str
                                    409 ;src/main.c:106: delay(5000);
      00017F 11 88 13               410 	ld	de, #0x1388
      000182 D5                     411 	push	de
      000183 CDr00r00               412 	call	_delay
      000186 E1                     413 	pop	hl
                                    414 ;src/main.c:107: wait_vbl_done();
      000187 CDr00r00               415 	call	_wait_vbl_done
                                    416 ;src/main.c:109: }
      00018A 18 D2                  417 	jr	00102$
      00018C                        418 ___str_11:
      00018C 5B 44 42 47 5D 20 28   419 	.ascii "[DBG] (%s:%d @ %s())"
             25 73 3A 25 64 20 40
             20 25 73 28 29 29
      0001A0 00                     420 	.db 0x00
      0001A1                        421 ___str_12:
      0001A1 73 72 63 2F 6D 61 69   422 	.ascii "src/main.c"
             6E 2E 63
      0001AB 00                     423 	.db 0x00
      0001AC                        424 ___str_13:
      0001AC 73 75 70 65 72 75 73   425 	.ascii "superuser_enter_hostmode"
             65 72 5F 65 6E 74 65
             72 5F 68 6F 73 74 6D
             6F 64 65
      0001C4 00                     426 	.db 0x00
      0001C5                        427 ___str_15:
      0001C5 0A                     428 	.db 0x0a
      0001C6 0A                     429 	.db 0x0a
      0001C7 77 61 69 74 69 6E 67   430 	.ascii "waiting for init"
             20 66 6F 72 20 69 6E
             69 74
      0001D7 00                     431 	.db 0x00
      0001D8                        432 ___str_17:
      0001D8 72 65 63 65 69 76 65   433 	.ascii "received init!"
             64 20 69 6E 69 74 21
      0001E6 0A                     434 	.db 0x0a
      0001E7 73 65 6E 64 69 6E 67   435 	.ascii "sending big string"
             20 62 69 67 20 73 74
             72 69 6E 67
      0001F9 00                     436 	.db 0x00
                                    437 ;src/main.c:112: void display_menu_bg()  {
                                    438 ;	---------------------------------
                                    439 ; Function display_menu_bg
                                    440 ; ---------------------------------
      0001FA                        441 _display_menu_bg::
                                    442 ;src/main.c:113: PRINT_FUNC_INFO;
      0001FA 11rEAr02               443 	ld	de, #___str_20
      0001FD D5                     444 	push	de
      0001FE 11 71 00               445 	ld	de, #0x0071
      000201 D5                     446 	push	de
      000202 11rDFr02               447 	ld	de, #___str_19
      000205 D5                     448 	push	de
      000206 11rCAr02               449 	ld	de, #___str_18
      000209 D5                     450 	push	de
      00020A CDr00r00               451 	call	_EMU_printf
      00020D E8 08                  452 	add	sp, #8
                                    453 ;src/main.c:114: HIDE_BKG;
      00020F F0r00                  454 	ldh	a, (_LCDC_REG + 0)
      000211 E6 FE                  455 	and	a, #0xfe
      000213 E0r00                  456 	ldh	(_LCDC_REG + 0), a
                                    457 ;src/main.c:115: set_bkg_palette(0, 1, menu_background_palettes);
      000215 11r00r00               458 	ld	de, #_menu_background_palettes
      000218 D5                     459 	push	de
      000219 AF                     460 	xor	a, a
      00021A 3C                     461 	inc	a
      00021B F5                     462 	push	af
      00021C CDr00r00               463 	call	_set_bkg_palette
      00021F E8 04                  464 	add	sp, #4
                                    465 ;src/main.c:116: set_bkg_palette(1, 1, menu_background_palettes);
      000221 11r00r00               466 	ld	de, #_menu_background_palettes
      000224 D5                     467 	push	de
      000225 21 01 01               468 	ld	hl, #0x101
      000228 E5                     469 	push	hl
      000229 CDr00r00               470 	call	_set_bkg_palette
      00022C E8 04                  471 	add	sp, #4
                                    472 ;src/main.c:117: set_bkg_palette(2, 1, menu_background_palettes);
      00022E 11r00r00               473 	ld	de, #_menu_background_palettes
      000231 D5                     474 	push	de
      000232 21 02 01               475 	ld	hl, #0x102
      000235 E5                     476 	push	hl
      000236 CDr00r00               477 	call	_set_bkg_palette
      000239 E8 04                  478 	add	sp, #4
                                    479 ;src/main.c:118: set_bkg_palette(3, 1, menu_background_palettes);
      00023B 11r00r00               480 	ld	de, #_menu_background_palettes
      00023E D5                     481 	push	de
      00023F 21 03 01               482 	ld	hl, #0x103
      000242 E5                     483 	push	hl
      000243 CDr00r00               484 	call	_set_bkg_palette
      000246 E8 04                  485 	add	sp, #4
                                    486 ;src/main.c:119: set_bkg_palette(4, 1, menu_background_palettes);
      000248 11r00r00               487 	ld	de, #_menu_background_palettes
      00024B D5                     488 	push	de
      00024C 21 04 01               489 	ld	hl, #0x104
      00024F E5                     490 	push	hl
      000250 CDr00r00               491 	call	_set_bkg_palette
      000253 E8 04                  492 	add	sp, #4
                                    493 ;src/main.c:120: set_bkg_palette(5, 1, menu_background_palettes);
      000255 11r00r00               494 	ld	de, #_menu_background_palettes
      000258 D5                     495 	push	de
      000259 21 05 01               496 	ld	hl, #0x105
      00025C E5                     497 	push	hl
      00025D CDr00r00               498 	call	_set_bkg_palette
      000260 E8 04                  499 	add	sp, #4
                                    500 ;src/main.c:121: set_bkg_palette(6, 1, menu_background_palettes);
      000262 11r00r00               501 	ld	de, #_menu_background_palettes
      000265 D5                     502 	push	de
      000266 21 06 01               503 	ld	hl, #0x106
      000269 E5                     504 	push	hl
      00026A CDr00r00               505 	call	_set_bkg_palette
      00026D E8 04                  506 	add	sp, #4
                                    507 ;src/main.c:122: set_bkg_palette(7, 1, menu_background_palettes);
      00026F 11r00r00               508 	ld	de, #_menu_background_palettes
      000272 D5                     509 	push	de
      000273 3E 01                  510 	ld	a, #0x01
      000275 F5                     511 	push	af
      000276 33                     512 	inc	sp
      000277 3E 07                  513 	ld	a, #0x07
      000279 F5                     514 	push	af
      00027A 33                     515 	inc	sp
      00027B CDr00r00               516 	call	_set_bkg_palette
      00027E E8 04                  517 	add	sp, #4
                                    518 ;src/main.c:123: PRINT_BANK_INFO;
      000280 F0r00                  519 	ldh	a, (__current_bank + 0)
      000282 4F                     520 	ld	c, a
      000283 06 00                  521 	ld	b, #0x00
      000285 C5                     522 	push	bc
      000286 11rFAr02               523 	ld	de, #___str_21
      000289 D5                     524 	push	de
      00028A CDr00r00               525 	call	_EMU_printf
      00028D E8 04                  526 	add	sp, #4
                                    527 ;src/main.c:124: set_bkg_data(0, menu_background_TILE_COUNT, menu_background_tiles);
      00028F 11r00r00               528 	ld	de, #_menu_background_tiles
      000292 D5                     529 	push	de
      000293 21 00 75               530 	ld	hl, #0x7500
      000296 E5                     531 	push	hl
      000297 CDr00r00               532 	call	_set_bkg_data
      00029A E8 04                  533 	add	sp, #4
                                    534 ;src/main.c:125: VBK_REG = 1;
      00029C 3E 01                  535 	ld	a, #0x01
      00029E E0r00                  536 	ldh	(_VBK_REG + 0), a
                                    537 ;src/main.c:126: set_bkg_tiles(0, 0, 20, 18, menu_background_map_attributes);
      0002A0 11r00r00               538 	ld	de, #_menu_background_map_attributes
      0002A3 D5                     539 	push	de
      0002A4 21 14 12               540 	ld	hl, #0x1214
      0002A7 E5                     541 	push	hl
      0002A8 AF                     542 	xor	a, a
      0002A9 0F                     543 	rrca
      0002AA F5                     544 	push	af
      0002AB CDr00r00               545 	call	_set_bkg_tiles
      0002AE E8 06                  546 	add	sp, #6
                                    547 ;src/main.c:127: VBK_REG = 0;
      0002B0 AF                     548 	xor	a, a
      0002B1 E0r00                  549 	ldh	(_VBK_REG + 0), a
                                    550 ;src/main.c:128: set_bkg_tiles(0, 0, 20, 18, menu_background_map);
      0002B3 11r00r00               551 	ld	de, #_menu_background_map
      0002B6 D5                     552 	push	de
      0002B7 21 14 12               553 	ld	hl, #0x1214
      0002BA E5                     554 	push	hl
      0002BB AF                     555 	xor	a, a
      0002BC 0F                     556 	rrca
      0002BD F5                     557 	push	af
      0002BE CDr00r00               558 	call	_set_bkg_tiles
      0002C1 E8 06                  559 	add	sp, #6
                                    560 ;src/main.c:129: SHOW_BKG;
      0002C3 F0r00                  561 	ldh	a, (_LCDC_REG + 0)
      0002C5 F6 01                  562 	or	a, #0x01
      0002C7 E0r00                  563 	ldh	(_LCDC_REG + 0), a
                                    564 ;src/main.c:130: }
      0002C9 C9                     565 	ret
      0002CA                        566 ___str_18:
      0002CA 5B 44 42 47 5D 20 28   567 	.ascii "[DBG] (%s:%d @ %s())"
             25 73 3A 25 64 20 40
             20 25 73 28 29 29
      0002DE 00                     568 	.db 0x00
      0002DF                        569 ___str_19:
      0002DF 73 72 63 2F 6D 61 69   570 	.ascii "src/main.c"
             6E 2E 63
      0002E9 00                     571 	.db 0x00
      0002EA                        572 ___str_20:
      0002EA 64 69 73 70 6C 61 79   573 	.ascii "display_menu_bg"
             5F 6D 65 6E 75 5F 62
             67
      0002F9 00                     574 	.db 0x00
      0002FA                        575 ___str_21:
      0002FA 5B 44 42 47 5D 20 62   576 	.ascii "[DBG] bank => %d"
             61 6E 6B 20 3D 3E 20
             25 64
      00030A 00                     577 	.db 0x00
                                    578 ;src/main.c:133: void display_menu_arrow() {
                                    579 ;	---------------------------------
                                    580 ; Function display_menu_arrow
                                    581 ; ---------------------------------
      00030B                        582 _display_menu_arrow::
                                    583 ;src/main.c:134: PRINT_FUNC_INFO;
      00030B 11r6Br03               584 	ld	de, #___str_24
      00030E D5                     585 	push	de
      00030F 11 86 00               586 	ld	de, #0x0086
      000312 D5                     587 	push	de
      000313 11r60r03               588 	ld	de, #___str_23
      000316 D5                     589 	push	de
      000317 11r4Br03               590 	ld	de, #___str_22
      00031A D5                     591 	push	de
      00031B CDr00r00               592 	call	_EMU_printf
      00031E E8 08                  593 	add	sp, #8
                                    594 ;src/main.c:135: SPRITES_8x8;
      000320 F0r00                  595 	ldh	a, (_LCDC_REG + 0)
      000322 E6 FB                  596 	and	a, #0xfb
      000324 E0r00                  597 	ldh	(_LCDC_REG + 0), a
                                    598 ;src/main.c:136: set_sprite_palette(0, 1, menu_background_palettes);
      000326 11r00r00               599 	ld	de, #_menu_background_palettes
      000329 D5                     600 	push	de
      00032A AF                     601 	xor	a, a
      00032B 3C                     602 	inc	a
      00032C F5                     603 	push	af
      00032D CDr00r00               604 	call	_set_sprite_palette
      000330 E8 04                  605 	add	sp, #4
                                    606 ;src/main.c:137: set_sprite_data(0, 8, menu_arrow_tiles);
      000332 11r00r00               607 	ld	de, #_menu_arrow_tiles
      000335 D5                     608 	push	de
      000336 21 00 08               609 	ld	hl, #0x800
      000339 E5                     610 	push	hl
      00033A CDr00r00               611 	call	_set_sprite_data
      00033D E8 04                  612 	add	sp, #4
                                    613 ;X:/gbc_hacks/gbdk/include/gb/gb.h:1447: shadow_OAM[nb].tile=tile;
      00033F 21r02r00               614 	ld	hl, #(_shadow_OAM + 2)
      000342 36 00                  615 	ld	(hl), #0x00
                                    616 ;src/main.c:139: SHOW_SPRITES;
      000344 F0r00                  617 	ldh	a, (_LCDC_REG + 0)
      000346 F6 02                  618 	or	a, #0x02
      000348 E0r00                  619 	ldh	(_LCDC_REG + 0), a
                                    620 ;src/main.c:140: }
      00034A C9                     621 	ret
      00034B                        622 ___str_22:
      00034B 5B 44 42 47 5D 20 28   623 	.ascii "[DBG] (%s:%d @ %s())"
             25 73 3A 25 64 20 40
             20 25 73 28 29 29
      00035F 00                     624 	.db 0x00
      000360                        625 ___str_23:
      000360 73 72 63 2F 6D 61 69   626 	.ascii "src/main.c"
             6E 2E 63
      00036A 00                     627 	.db 0x00
      00036B                        628 ___str_24:
      00036B 64 69 73 70 6C 61 79   629 	.ascii "display_menu_arrow"
             5F 6D 65 6E 75 5F 61
             72 72 6F 77
      00037D 00                     630 	.db 0x00
                                    631 ;src/main.c:142: void move_menu_arrow(uint8_t menu_x, uint8_t menu_y) 
                                    632 ;	---------------------------------
                                    633 ; Function move_menu_arrow
                                    634 ; ---------------------------------
      00037E                        635 _move_menu_arrow::
                                    636 ;src/main.c:144: move_sprite(0, menu_x, menu_y);
      00037E F8 03                  637 	ldhl	sp,	#3
      000380 3A                     638 	ld	a, (hl-)
      000381 47                     639 	ld	b, a
      000382 4E                     640 	ld	c, (hl)
                                    641 ;X:/gbc_hacks/gbdk/include/gb/gb.h:1520: OAM_item_t * itm = &shadow_OAM[nb];
      000383 21r00r00               642 	ld	hl, #_shadow_OAM
                                    643 ;X:/gbc_hacks/gbdk/include/gb/gb.h:1521: itm->y=y, itm->x=x;
      000386 78                     644 	ld	a, b
      000387 22                     645 	ld	(hl+), a
      000388 71                     646 	ld	(hl), c
                                    647 ;src/main.c:144: move_sprite(0, menu_x, menu_y);
                                    648 ;src/main.c:145: }
      000389 C9                     649 	ret
                                    650 ;src/main.c:147: void display_menu()  
                                    651 ;	---------------------------------
                                    652 ; Function display_menu
                                    653 ; ---------------------------------
      00038A                        654 _display_menu::
                                    655 ;src/main.c:149: PRINT_FUNC_INFO;
      00038A 11rC8r03               656 	ld	de, #___str_27
      00038D D5                     657 	push	de
      00038E 11 95 00               658 	ld	de, #0x0095
      000391 D5                     659 	push	de
      000392 11rBDr03               660 	ld	de, #___str_26
      000395 D5                     661 	push	de
      000396 11rA8r03               662 	ld	de, #___str_25
      000399 D5                     663 	push	de
      00039A CDr00r00               664 	call	_EMU_printf
      00039D E8 08                  665 	add	sp, #8
                                    666 ;src/main.c:153: display_menu_bg();
      00039F CDrFAr01               667 	call	_display_menu_bg
                                    668 ;src/main.c:154: display_menu_arrow();
      0003A2 CDr0Br03               669 	call	_display_menu_arrow
                                    670 ;src/main.c:155: text_load_font();
                                    671 ;src/main.c:156: }
      0003A5 C3r00r00               672 	jp	_text_load_font
      0003A8                        673 ___str_25:
      0003A8 5B 44 42 47 5D 20 28   674 	.ascii "[DBG] (%s:%d @ %s())"
             25 73 3A 25 64 20 40
             20 25 73 28 29 29
      0003BC 00                     675 	.db 0x00
      0003BD                        676 ___str_26:
      0003BD 73 72 63 2F 6D 61 69   677 	.ascii "src/main.c"
             6E 2E 63
      0003C7 00                     678 	.db 0x00
      0003C8                        679 ___str_27:
      0003C8 64 69 73 70 6C 61 79   680 	.ascii "display_menu"
             5F 6D 65 6E 75
      0003D4 00                     681 	.db 0x00
                                    682 ;src/main.c:158: void start_test(uint8_t testIdx) 
                                    683 ;	---------------------------------
                                    684 ; Function start_test
                                    685 ; ---------------------------------
      0003D5                        686 _start_test::
                                    687 ;src/main.c:160: PRINT_FUNC_INFO;
      0003D5 11r75r04               688 	ld	de, #___str_30
      0003D8 D5                     689 	push	de
      0003D9 AF                     690 	xor	a, a
      0003DA A7                     691 	and	a
      0003DB F5                     692 	push	af
      0003DC 11r6Ar04               693 	ld	de, #___str_29
      0003DF D5                     694 	push	de
      0003E0 11r55r04               695 	ld	de, #___str_28
      0003E3 D5                     696 	push	de
      0003E4 CDr00r00               697 	call	_EMU_printf
      0003E7 E8 08                  698 	add	sp, #8
                                    699 ;src/main.c:161: uint8_t testResult = 0;
      0003E9 1E 00                  700 	ld	e, #0x00
                                    701 ;src/main.c:162: if (testIdx == 0) {
      0003EB F8 02                  702 	ldhl	sp,	#2
      0003ED 7E                     703 	ld	a, (hl)
      0003EE B7                     704 	or	a, a
      0003EF 20 05                  705 	jr	NZ, 00116$
                                    706 ;src/main.c:164: testResult = button_test();
      0003F1 CDr00r00               707 	call	_button_test
      0003F4 18 41                  708 	jr	00117$
      0003F6                        709 00116$:
                                    710 ;src/main.c:165: } else if (testIdx == 1) {
      0003F6 F8 02                  711 	ldhl	sp,	#2
      0003F8 7E                     712 	ld	a, (hl)
      0003F9 3D                     713 	dec	a
      0003FA 20 08                  714 	jr	NZ, 00113$
                                    715 ;src/main.c:167: display_test();
      0003FC CDr00r00               716 	call	_display_test
                                    717 ;src/main.c:168: testResult = ask_user_pass_or_fail();
      0003FF CDr00r00               718 	call	_ask_user_pass_or_fail
      000402 18 33                  719 	jr	00117$
      000404                        720 00113$:
                                    721 ;src/main.c:169: } else if (testIdx == 2) {
      000404 F8 02                  722 	ldhl	sp,	#2
      000406 7E                     723 	ld	a, (hl)
      000407 D6 02                  724 	sub	a, #0x02
      000409 20 08                  725 	jr	NZ, 00110$
                                    726 ;src/main.c:171: blank_display();
      00040B CDr00r00               727 	call	_blank_display
                                    728 ;src/main.c:172: testResult = mem_test();
      00040E CDr00r00               729 	call	_mem_test
      000411 18 24                  730 	jr	00117$
      000413                        731 00110$:
                                    732 ;src/main.c:173: } else if (testIdx == 3) {
      000413 F8 02                  733 	ldhl	sp,	#2
      000415 7E                     734 	ld	a, (hl)
      000416 D6 03                  735 	sub	a, #0x03
      000418 20 05                  736 	jr	NZ, 00107$
                                    737 ;src/main.c:175: testResult = audio_test();
      00041A CDr00r00               738 	call	_audio_test
      00041D 18 18                  739 	jr	00117$
      00041F                        740 00107$:
                                    741 ;src/main.c:176: } else if (testIdx == 4) {
      00041F F8 02                  742 	ldhl	sp,	#2
      000421 7E                     743 	ld	a, (hl)
      000422 D6 04                  744 	sub	a, #0x04
      000424 20 05                  745 	jr	NZ, 00104$
                                    746 ;src/main.c:178: testResult = gblink_test();
      000426 CDr00r00               747 	call	_gblink_test
      000429 18 0C                  748 	jr	00117$
      00042B                        749 00104$:
                                    750 ;src/main.c:179: } else if (testIdx == 5) {
      00042B F8 02                  751 	ldhl	sp,	#2
      00042D 7E                     752 	ld	a, (hl)
      00042E D6 05                  753 	sub	a, #0x05
      000430 20 05                  754 	jr	NZ, 00117$
                                    755 ;src/main.c:181: reset();
      000432 D5                     756 	push	de
      000433 CDr00r00               757 	call	_reset
      000436 D1                     758 	pop	de
      000437                        759 00117$:
                                    760 ;src/main.c:183: EMU_printf("test result => %x", testResult);
      000437 16 00                  761 	ld	d, #0x00
      000439 D5                     762 	push	de
      00043A D5                     763 	push	de
      00043B 01r80r04               764 	ld	bc, #___str_31
      00043E C5                     765 	push	bc
      00043F CDr00r00               766 	call	_EMU_printf
      000442 E8 04                  767 	add	sp, #4
      000444 D1                     768 	pop	de
                                    769 ;src/main.c:184: save_test_result(testIdx + 1, testResult);
      000445 F8 02                  770 	ldhl	sp,	#2
      000447 4E                     771 	ld	c, (hl)
      000448 06 00                  772 	ld	b, #0x00
      00044A 03                     773 	inc	bc
      00044B D5                     774 	push	de
      00044C C5                     775 	push	bc
      00044D CDr00r00               776 	call	_save_test_result
      000450 E8 04                  777 	add	sp, #4
                                    778 ;src/main.c:185: display_menu();
                                    779 ;src/main.c:186: }
      000452 C3r8Ar03               780 	jp	_display_menu
      000455                        781 ___str_28:
      000455 5B 44 42 47 5D 20 28   782 	.ascii "[DBG] (%s:%d @ %s())"
             25 73 3A 25 64 20 40
             20 25 73 28 29 29
      000469 00                     783 	.db 0x00
      00046A                        784 ___str_29:
      00046A 73 72 63 2F 6D 61 69   785 	.ascii "src/main.c"
             6E 2E 63
      000474 00                     786 	.db 0x00
      000475                        787 ___str_30:
      000475 73 74 61 72 74 5F 74   788 	.ascii "start_test"
             65 73 74
      00047F 00                     789 	.db 0x00
      000480                        790 ___str_31:
      000480 74 65 73 74 20 72 65   791 	.ascii "test result => %x"
             73 75 6C 74 20 3D 3E
             20 25 78
      000491 00                     792 	.db 0x00
                                    793 ;src/main.c:188: int superuser_hold()
                                    794 ;	---------------------------------
                                    795 ; Function superuser_hold
                                    796 ; ---------------------------------
      000492                        797 _superuser_hold::
                                    798 ;src/main.c:190: PRINT_FUNC_INFO;
      000492 11r1Dr05               799 	ld	de, #___str_34
      000495 D5                     800 	push	de
      000496 11 BE 00               801 	ld	de, #0x00be
      000499 D5                     802 	push	de
      00049A 11r12r05               803 	ld	de, #___str_33
      00049D D5                     804 	push	de
      00049E 11rFDr04               805 	ld	de, #___str_32
      0004A1 D5                     806 	push	de
      0004A2 CDr00r00               807 	call	_EMU_printf
      0004A5 E8 08                  808 	add	sp, #8
                                    809 ;src/main.c:193: int isSuper = 0;
      0004A7 01 00 00               810 	ld	bc, #0x0000
                                    811 ;src/main.c:195: while (delayInc > 0) {
      0004AA 21 02 00               812 	ld	hl, #0x0002
      0004AD                        813 00105$:
      0004AD 5C                     814 	ld	e, h
      0004AE AF                     815 	xor	a, a
      0004AF 57                     816 	ld	d, a
      0004B0 BD                     817 	cp	a, l
      0004B1 9C                     818 	sbc	a, h
      0004B2 CB 7B                  819 	bit	7, e
      0004B4 28 07                  820 	jr	Z, 00130$
      0004B6 CB 7A                  821 	bit	7, d
      0004B8 20 08                  822 	jr	NZ, 00131$
      0004BA BF                     823 	cp	a, a
      0004BB 18 05                  824 	jr	00131$
      0004BD                        825 00130$:
      0004BD CB 7A                  826 	bit	7, d
      0004BF 28 01                  827 	jr	Z, 00131$
      0004C1 37                     828 	scf
      0004C2                        829 00131$:
      0004C2 30 36                  830 	jr	NC, 00107$
                                    831 ;src/main.c:199: if (joypad() & J_START && joypad() & J_SELECT) {
      0004C4 E5                     832 	push	hl
      0004C5 CDr00r00               833 	call	_joypad
      0004C8 7B                     834 	ld	a, e
      0004C9 E1                     835 	pop	hl
      0004CA 07                     836 	rlca
      0004CB 30 1B                  837 	jr	NC, 00102$
      0004CD E5                     838 	push	hl
      0004CE CDr00r00               839 	call	_joypad
      0004D1 E1                     840 	pop	hl
      0004D2 CB 73                  841 	bit	6, e
      0004D4 28 12                  842 	jr	Z, 00102$
                                    843 ;src/main.c:200: isSuper = 1;
      0004D6 01 01 00               844 	ld	bc, #0x0001
                                    845 ;src/main.c:201: printf("you are super.\n");
      0004D9 C5                     846 	push	bc
      0004DA 11r2Cr05               847 	ld	de, #___str_36
      0004DD D5                     848 	push	de
      0004DE CDr00r00               849 	call	_puts
      0004E1 E1                     850 	pop	hl
      0004E2 C1                     851 	pop	bc
                                    852 ;src/main.c:202: waitpadup();
      0004E3 CDr00r00               853 	call	_waitpadup
                                    854 ;src/main.c:203: break;
      0004E6 18 12                  855 	jr	00107$
      0004E8                        856 00102$:
                                    857 ;src/main.c:205: isSuper = 0;
                                    858 ;src/main.c:207: delayInc--;
      0004E8 2B                     859 	dec	hl
      0004E9 01 00 00               860 	ld	bc, #0x0000
                                    861 ;src/main.c:208: delay(1000);
      0004EC E5                     862 	push	hl
      0004ED C5                     863 	push	bc
      0004EE 11 E8 03               864 	ld	de, #0x03e8
      0004F1 D5                     865 	push	de
      0004F2 CDr00r00               866 	call	_delay
      0004F5 E1                     867 	pop	hl
      0004F6 C1                     868 	pop	bc
      0004F7 E1                     869 	pop	hl
      0004F8 18 B3                  870 	jr	00105$
      0004FA                        871 00107$:
                                    872 ;src/main.c:210: return isSuper;
      0004FA 59                     873 	ld	e, c
      0004FB 50                     874 	ld	d, b
                                    875 ;src/main.c:211: }
      0004FC C9                     876 	ret
      0004FD                        877 ___str_32:
      0004FD 5B 44 42 47 5D 20 28   878 	.ascii "[DBG] (%s:%d @ %s())"
             25 73 3A 25 64 20 40
             20 25 73 28 29 29
      000511 00                     879 	.db 0x00
      000512                        880 ___str_33:
      000512 73 72 63 2F 6D 61 69   881 	.ascii "src/main.c"
             6E 2E 63
      00051C 00                     882 	.db 0x00
      00051D                        883 ___str_34:
      00051D 73 75 70 65 72 75 73   884 	.ascii "superuser_hold"
             65 72 5F 68 6F 6C 64
      00052B 00                     885 	.db 0x00
      00052C                        886 ___str_36:
      00052C 79 6F 75 20 61 72 65   887 	.ascii "you are super."
             20 73 75 70 65 72 2E
      00053A 00                     888 	.db 0x00
                                    889 ;src/main.c:214: void main(void)
                                    890 ;	---------------------------------
                                    891 ; Function main
                                    892 ; ---------------------------------
      00053B                        893 _main::
      00053B 3B                     894 	dec	sp
                                    895 ;src/main.c:216: ENABLE_RAM;
      00053C 21 00 00               896 	ld	hl, #0x0000
      00053F 36 0A                  897 	ld	(hl), #0x0a
                                    898 ;X:/gbc_hacks/gbdk/include/gb/gb.h:655: __asm__("ei");
      000541 FB                     899 	ei
                                    900 ;src/main.c:218: PRINT_FUNC_INFO;
      000542 11r46r06               901 	ld	de, #___str_39
      000545 D5                     902 	push	de
      000546 11 DA 00               903 	ld	de, #0x00da
      000549 D5                     904 	push	de
      00054A 11r3Br06               905 	ld	de, #___str_38
      00054D D5                     906 	push	de
      00054E 11r26r06               907 	ld	de, #___str_37
      000551 D5                     908 	push	de
      000552 CDr00r00               909 	call	_EMU_printf
      000555 E8 08                  910 	add	sp, #8
                                    911 ;src/main.c:219: rng_seed = DIV_REG;
      000557 F0r00                  912 	ldh	a, (_DIV_REG + 0)
      000559 21r00r00               913 	ld	hl, #_rng_seed
      00055C 22                     914 	ld	(hl+), a
      00055D 36 00                  915 	ld	(hl), #0x00
                                    916 ;src/main.c:220: uint8_t menu_y = MENU_ARROW_START_Y;
      00055F FAr03r00               917 	ld	a, (#_MENU_ARROW_START_Y)
      000562 F8 00                  918 	ldhl	sp,	#0
      000564 77                     919 	ld	(hl), a
                                    920 ;src/main.c:221: set_interrupts(VBL_IFLAG | SIO_IFLAG);
      000565 3E 09                  921 	ld	a, #0x09
      000567 F5                     922 	push	af
      000568 33                     923 	inc	sp
      000569 CDr00r00               924 	call	_set_interrupts
      00056C 33                     925 	inc	sp
                                    926 ;src/main.c:222: if (superuser_hold() == 1) {
      00056D CDr92r04               927 	call	_superuser_hold
      000570 7B                     928 	ld	a, e
      000571 3D                     929 	dec	a
      000572 B2                     930 	or	a, d
      000573 20 03                  931 	jr	NZ, 00102$
                                    932 ;src/main.c:223: superuser_enter_hostmode();
      000575 CDr3Dr01               933 	call	_superuser_enter_hostmode
      000578                        934 00102$:
                                    935 ;src/main.c:225: check_savemem();
      000578 CDr00r00               936 	call	_check_savemem
                                    937 ;src/main.c:226: wait_vbl_done();
      00057B CDr00r00               938 	call	_wait_vbl_done
                                    939 ;src/main.c:227: delay(500);
      00057E 11 F4 01               940 	ld	de, #0x01f4
      000581 D5                     941 	push	de
      000582 CDr00r00               942 	call	_delay
      000585 E1                     943 	pop	hl
                                    944 ;src/main.c:228: display_menu();
      000586 CDr8Ar03               945 	call	_display_menu
                                    946 ;src/main.c:229: rng_seed |= (uint16_t)DIV_REG << 8;
      000589 F0r00                  947 	ldh	a, (_DIV_REG + 0)
      00058B 4F                     948 	ld	c, a
      00058C AF                     949 	xor	a, a
      00058D 21r00r00               950 	ld	hl, #_rng_seed
      000590 B6                     951 	or	a, (hl)
      000591 22                     952 	ld	(hl+), a
      000592 79                     953 	ld	a, c
      000593 B6                     954 	or	a, (hl)
                                    955 ;src/main.c:230: initarand(rng_seed);
      000594 32                     956 	ld	(hl-), a
      000595 2A                     957 	ld	a, (hl+)
      000596 5F                     958 	ld	e, a
      000597 56                     959 	ld	d, (hl)
      000598 D5                     960 	push	de
      000599 CDr00r00               961 	call	_initarand
      00059C E1                     962 	pop	hl
                                    963 ;src/main.c:232: while(1) {
      00059D                        964 00117$:
                                    965 ;src/main.c:233: if (joypad() & J_UP) {
      00059D CDr00r00               966 	call	_joypad
                                    967 ;src/main.c:237: menu_y -= 12;
      0005A0 F8 00                  968 	ldhl	sp,	#0
      0005A2 46                     969 	ld	b, (hl)
                                    970 ;src/main.c:233: if (joypad() & J_UP) {
      0005A3 CB 53                  971 	bit	2, e
      0005A5 28 16                  972 	jr	Z, 00114$
                                    973 ;src/main.c:234: waitpadup();
      0005A7 CDr00r00               974 	call	_waitpadup
                                    975 ;src/main.c:235: if (CURRENT_INDEX > 0) {
      0005AA 21r0Br00               976 	ld	hl, #_CURRENT_INDEX
      0005AD 7E                     977 	ld	a, (hl)
      0005AE B7                     978 	or	a, a
      0005AF 28 07                  979 	jr	Z, 00104$
                                    980 ;src/main.c:236: CURRENT_INDEX--;
      0005B1 35                     981 	dec	(hl)
                                    982 ;src/main.c:237: menu_y -= 12;
      0005B2 78                     983 	ld	a, b
      0005B3 C6 F4                  984 	add	a, #0xf4
      0005B5 F8 00                  985 	ldhl	sp,	#0
      0005B7 77                     986 	ld	(hl), a
      0005B8                        987 00104$:
                                    988 ;src/main.c:239: toggleRumble();
      0005B8 CDr00r00               989 	call	_toggleRumble
      0005BB 18 49                  990 	jr	00115$
      0005BD                        991 00114$:
                                    992 ;src/main.c:240: } else if (joypad() & J_DOWN) {
      0005BD CDr00r00               993 	call	_joypad
      0005C0 CB 5B                  994 	bit	3, e
      0005C2 28 18                  995 	jr	Z, 00111$
                                    996 ;src/main.c:241: waitpadup();
      0005C4 CDr00r00               997 	call	_waitpadup
                                    998 ;src/main.c:242: if (CURRENT_INDEX < MENU_INDEX_MAX) {
      0005C7 FAr0Br00               999 	ld	a, (#_CURRENT_INDEX)
      0005CA 21r0Ar00              1000 	ld	hl, #_MENU_INDEX_MAX
      0005CD 96                    1001 	sub	a, (hl)
      0005CE 30 36                 1002 	jr	NC, 00115$
                                   1003 ;src/main.c:243: CURRENT_INDEX++;
      0005D0 21r0Br00              1004 	ld	hl, #_CURRENT_INDEX
      0005D3 34                    1005 	inc	(hl)
                                   1006 ;src/main.c:244: menu_y += 12;
      0005D4 78                    1007 	ld	a, b
      0005D5 C6 0C                 1008 	add	a, #0x0c
      0005D7 F8 00                 1009 	ldhl	sp,	#0
      0005D9 77                    1010 	ld	(hl), a
      0005DA 18 2A                 1011 	jr	00115$
      0005DC                       1012 00111$:
                                   1013 ;src/main.c:247: } else if (joypad() & J_A || joypad() & J_LEFT) {
      0005DC CDr00r00              1014 	call	_joypad
      0005DF CB 63                 1015 	bit	4, e
      0005E1 20 07                 1016 	jr	NZ, 00107$
      0005E3 CDr00r00              1017 	call	_joypad
      0005E6 CB 4B                 1018 	bit	1, e
      0005E8 28 1C                 1019 	jr	Z, 00115$
      0005EA                       1020 00107$:
                                   1021 ;src/main.c:248: EMU_printf("executing test idx => 0x%x\n", CURRENT_INDEX);
      0005EA 21r0Br00              1022 	ld	hl, #_CURRENT_INDEX
      0005ED 4E                    1023 	ld	c, (hl)
      0005EE 06 00                 1024 	ld	b, #0x00
      0005F0 C5                    1025 	push	bc
      0005F1 11r4Br06              1026 	ld	de, #___str_40
      0005F4 D5                    1027 	push	de
      0005F5 CDr00r00              1028 	call	_EMU_printf
      0005F8 E8 04                 1029 	add	sp, #4
                                   1030 ;src/main.c:249: waitpadup();
      0005FA CDr00r00              1031 	call	_waitpadup
                                   1032 ;src/main.c:250: start_test(CURRENT_INDEX);
      0005FD FAr0Br00              1033 	ld	a, (#_CURRENT_INDEX)
      000600 F5                    1034 	push	af
      000601 33                    1035 	inc	sp
      000602 CDrD5r03              1036 	call	_start_test
      000605 33                    1037 	inc	sp
      000606                       1038 00115$:
                                   1039 ;src/main.c:254: move_menu_arrow(MENU_ARROW_X_FOR_INDEX[CURRENT_INDEX], menu_y);
      000606 3Er04                 1040 	ld	a, #<(_MENU_ARROW_X_FOR_INDEX)
      000608 21r0Br00              1041 	ld	hl, #_CURRENT_INDEX
      00060B 86                    1042 	add	a, (hl)
      00060C 4F                    1043 	ld	c, a
      00060D 3Es00                 1044 	ld	a, #>(_MENU_ARROW_X_FOR_INDEX)
      00060F CE 00                 1045 	adc	a, #0x00
      000611 47                    1046 	ld	b, a
      000612 0A                    1047 	ld	a, (bc)
      000613 F8 00                 1048 	ldhl	sp,	#0
      000615 66                    1049 	ld	h, (hl)
                                   1050 ;	spillPairReg hl
                                   1051 ;	spillPairReg hl
      000616 E5                    1052 	push	hl
      000617 33                    1053 	inc	sp
      000618 F5                    1054 	push	af
      000619 33                    1055 	inc	sp
      00061A CDr7Er03              1056 	call	_move_menu_arrow
      00061D E1                    1057 	pop	hl
                                   1058 ;src/main.c:255: wait_vbl_done();
      00061E CDr00r00              1059 	call	_wait_vbl_done
      000621 C3r9Dr05              1060 	jp	00117$
                                   1061 ;src/main.c:258: }
      000624 33                    1062 	inc	sp
      000625 C9                    1063 	ret
      000626                       1064 ___str_37:
      000626 5B 44 42 47 5D 20 28  1065 	.ascii "[DBG] (%s:%d @ %s())"
             25 73 3A 25 64 20 40
             20 25 73 28 29 29
      00063A 00                    1066 	.db 0x00
      00063B                       1067 ___str_38:
      00063B 73 72 63 2F 6D 61 69  1068 	.ascii "src/main.c"
             6E 2E 63
      000645 00                    1069 	.db 0x00
      000646                       1070 ___str_39:
      000646 6D 61 69 6E           1071 	.ascii "main"
      00064A 00                    1072 	.db 0x00
      00064B                       1073 ___str_40:
      00064B 65 78 65 63 75 74 69  1074 	.ascii "executing test idx => 0x%x"
             6E 67 20 74 65 73 74
             20 69 64 78 20 3D 3E
             20 30 78 25 78
      000665 0A                    1075 	.db 0x0a
      000666 00                    1076 	.db 0x00
                                   1077 	.area _CODE
                                   1078 	.area _INITIALIZER
      000000                       1079 __xinit____EMU_PROFILER_INIT:
      000000r00r00                 1080 	.dw _EMU_profiler_message
      000002                       1081 __xinit__MENU_ARROW_START_X:
      000002 44                    1082 	.db #0x44	; 68	'D'
      000003                       1083 __xinit__MENU_ARROW_START_Y:
      000003 36                    1084 	.db #0x36	; 54	'6'
      000004                       1085 __xinit__MENU_ARROW_X_FOR_INDEX:
      000004 44                    1086 	.db #0x44	; 68	'D'
      000005 34                    1087 	.db #0x34	; 52	'4'
      000006 36                    1088 	.db #0x36	; 54	'6'
      000007 36                    1089 	.db #0x36	; 54	'6'
      000008 38                    1090 	.db #0x38	; 56	'8'
      000009 3C                    1091 	.db #0x3c	; 60
      00000A                       1092 __xinit__MENU_INDEX_MAX:
      00000A 05                    1093 	.db #0x05	; 5
      00000B                       1094 __xinit__CURRENT_INDEX:
      00000B 00                    1095 	.db #0x00	; 0
                                   1096 	.area _CABS (ABS)
