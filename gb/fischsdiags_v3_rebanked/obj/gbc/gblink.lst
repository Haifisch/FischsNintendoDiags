                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12539 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module gblink
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl b_gblink_test
                                     12 	.globl _gblink_test
                                     13 	.globl b___func_gblink_test
                                     14 	.globl ___func_gblink_test
                                     15 	.globl b_superuser_enter_hostmode
                                     16 	.globl _superuser_enter_hostmode
                                     17 	.globl b___func_superuser_enter_hostmode
                                     18 	.globl ___func_superuser_enter_hostmode
                                     19 	.globl b_superuser_hold
                                     20 	.globl _superuser_hold
                                     21 	.globl b___func_superuser_hold
                                     22 	.globl ___func_superuser_hold
                                     23 	.globl _send_data_str
                                     24 	.globl _wait_for_start
                                     25 	.globl _receive_data_str
                                     26 	.globl _show_gblink_background
                                     27 	.globl _set_bkg_palette
                                     28 	.globl b_text_print_char_bkg
                                     29 	.globl _text_print_char_bkg
                                     30 	.globl b_text_print_string_bkg
                                     31 	.globl _text_print_string_bkg
                                     32 	.globl _puts
                                     33 	.globl _printf
                                     34 	.globl _cls
                                     35 	.globl _EMU_printf
                                     36 	.globl _set_bkg_tiles
                                     37 	.globl _set_bkg_data
                                     38 	.globl _wait_vbl_done
                                     39 	.globl _waitpadup
                                     40 	.globl _joypad
                                     41 	.globl _delay
                                     42 	.globl _receive_byte
                                     43 	.globl _send_byte
                                     44 	.globl _test_data_str
                                     45 ;--------------------------------------------------------
                                     46 ; special function registers
                                     47 ;--------------------------------------------------------
                                     48 ;--------------------------------------------------------
                                     49 ; ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area _DATA
                                     52 ;--------------------------------------------------------
                                     53 ; ram data
                                     54 ;--------------------------------------------------------
                                     55 	.area _INITIALIZED
      000000                         56 ___EMU_PROFILER_INIT:
      000000                         57 	.ds 2
                                     58 ;--------------------------------------------------------
                                     59 ; absolute external ram data
                                     60 ;--------------------------------------------------------
                                     61 	.area _DABS (ABS)
                                     62 ;--------------------------------------------------------
                                     63 ; global & static initialisations
                                     64 ;--------------------------------------------------------
                                     65 	.area _HOME
                                     66 	.area _GSINIT
                                     67 	.area _GSFINAL
                                     68 	.area _GSINIT
                                     69 ;--------------------------------------------------------
                                     70 ; Home
                                     71 ;--------------------------------------------------------
                                     72 	.area _HOME
                                     73 	.area _HOME
                                     74 ;--------------------------------------------------------
                                     75 ; code
                                     76 ;--------------------------------------------------------
                                     77 	.area _CODE_1
                                     78 ;src/test_impl/gblink.c:23: void show_gblink_background() 
                                     79 ;	---------------------------------
                                     80 ; Function show_gblink_background
                                     81 ; ---------------------------------
      000000                         82 _show_gblink_background::
                                     83 ;src/test_impl/gblink.c:25: HIDE_BKG;
      000000 F0r00                   84 	ldh	a, (_LCDC_REG + 0)
      000002 E6 FE                   85 	and	a, #0xfe
      000004 E0r00                   86 	ldh	(_LCDC_REG + 0), a
                                     87 ;src/test_impl/gblink.c:26: set_bkg_palette(1, 1, &gblink_bg_palettes[4]);
      000006 11r08r00                88 	ld	de, #(_gblink_bg_palettes + 8)
      000009 D5                      89 	push	de
      00000A 21 01 01                90 	ld	hl, #0x101
      00000D E5                      91 	push	hl
      00000E CDr00r00                92 	call	_set_bkg_palette
      000011 E8 04                   93 	add	sp, #4
                                     94 ;src/test_impl/gblink.c:27: set_bkg_palette(0, 1, &gblink_bg_palettes[0]);
      000013 11r00r00                95 	ld	de, #_gblink_bg_palettes
      000016 D5                      96 	push	de
      000017 AF                      97 	xor	a, a
      000018 3C                      98 	inc	a
      000019 F5                      99 	push	af
      00001A CDr00r00               100 	call	_set_bkg_palette
      00001D E8 04                  101 	add	sp, #4
                                    102 ;src/test_impl/gblink.c:29: set_bkg_data(0, gblink_bg_TILE_COUNT, gblink_bg_tiles);
      00001F 11r00r00               103 	ld	de, #_gblink_bg_tiles
      000022 D5                     104 	push	de
      000023 21 00 52               105 	ld	hl, #0x5200
      000026 E5                     106 	push	hl
      000027 CDr00r00               107 	call	_set_bkg_data
      00002A E8 04                  108 	add	sp, #4
                                    109 ;src/test_impl/gblink.c:30: VBK_REG = 1;
      00002C 3E 01                  110 	ld	a, #0x01
      00002E E0r00                  111 	ldh	(_VBK_REG + 0), a
                                    112 ;src/test_impl/gblink.c:31: set_tile_map(0, 0, 20, 18, gblink_bg_map_attributes);
      000030 11r00r00               113 	ld	de, #_gblink_bg_map_attributes
      000033 D5                     114 	push	de
      000034 21 14 12               115 	ld	hl, #0x1214
      000037 E5                     116 	push	hl
      000038 AF                     117 	xor	a, a
      000039 0F                     118 	rrca
      00003A F5                     119 	push	af
      00003B CDr00r00               120 	call	_set_bkg_tiles
      00003E E8 06                  121 	add	sp, #6
                                    122 ;src/test_impl/gblink.c:32: VBK_REG = 0;
      000040 AF                     123 	xor	a, a
      000041 E0r00                  124 	ldh	(_VBK_REG + 0), a
                                    125 ;src/test_impl/gblink.c:33: set_tile_map(0, 0, 20, 18, gblink_bg_map);
      000043 11r00r00               126 	ld	de, #_gblink_bg_map
      000046 D5                     127 	push	de
      000047 21 14 12               128 	ld	hl, #0x1214
      00004A E5                     129 	push	hl
      00004B AF                     130 	xor	a, a
      00004C 0F                     131 	rrca
      00004D F5                     132 	push	af
      00004E CDr00r00               133 	call	_set_bkg_tiles
      000051 E8 06                  134 	add	sp, #6
                                    135 ;src/test_impl/gblink.c:34: SHOW_BKG;
      000053 F0r00                  136 	ldh	a, (_LCDC_REG + 0)
      000055 F6 01                  137 	or	a, #0x01
      000057 E0r00                  138 	ldh	(_LCDC_REG + 0), a
                                    139 ;src/test_impl/gblink.c:35: }
      000059 C9                     140 	ret
      00005A                        141 _test_data_str:
      00005A 46                     142 	.db #0x46	; 70	'F'
      00005B 49                     143 	.db #0x49	; 73	'I'
      00005C 53                     144 	.db #0x53	; 83	'S'
      00005D 43                     145 	.db #0x43	; 67	'C'
      00005E 48                     146 	.db #0x48	; 72	'H'
      00005F 53                     147 	.db #0x53	; 83	'S'
      000060 2D                     148 	.db #0x2d	; 45
      000061 44                     149 	.db #0x44	; 68	'D'
      000062 49                     150 	.db #0x49	; 73	'I'
      000063 41                     151 	.db #0x41	; 65	'A'
      000064 47                     152 	.db #0x47	; 71	'G'
      000065 53                     153 	.db #0x53	; 83	'S'
      000066 2D                     154 	.db #0x2d	; 45
      000067 56                     155 	.db #0x56	; 86	'V'
      000068 33                     156 	.db #0x33	; 51	'3'
      000069 2D                     157 	.db #0x2d	; 45
      00006A 47                     158 	.db #0x47	; 71	'G'
      00006B 42                     159 	.db #0x42	; 66	'B'
      00006C 2D                     160 	.db #0x2d	; 45
      00006D 4C                     161 	.db #0x4c	; 76	'L'
      00006E 49                     162 	.db #0x49	; 73	'I'
      00006F 4E                     163 	.db #0x4e	; 78	'N'
      000070 4B                     164 	.db #0x4b	; 75	'K'
      000071 2D                     165 	.db #0x2d	; 45
      000072 43                     166 	.db #0x43	; 67	'C'
      000073 4F                     167 	.db #0x4f	; 79	'O'
      000074 4D                     168 	.db #0x4d	; 77	'M'
      000075 4D                     169 	.db #0x4d	; 77	'M'
      000076 55                     170 	.db #0x55	; 85	'U'
      000077 4E                     171 	.db #0x4e	; 78	'N'
      000078 49                     172 	.db #0x49	; 73	'I'
      000079 43                     173 	.db #0x43	; 67	'C'
      00007A 41                     174 	.db #0x41	; 65	'A'
      00007B 54                     175 	.db #0x54	; 84	'T'
      00007C 49                     176 	.db #0x49	; 73	'I'
      00007D 4F                     177 	.db #0x4f	; 79	'O'
      00007E 4E                     178 	.db #0x4e	; 78	'N'
      00007F 2D                     179 	.db #0x2d	; 45
      000080 54                     180 	.db #0x54	; 84	'T'
      000081 45                     181 	.db #0x45	; 69	'E'
      000082 53                     182 	.db #0x53	; 83	'S'
      000083 54                     183 	.db #0x54	; 84	'T'
      000084 2D                     184 	.db #0x2d	; 45
      000085 50                     185 	.db #0x50	; 80	'P'
      000086 41                     186 	.db #0x41	; 65	'A'
      000087 53                     187 	.db #0x53	; 83	'S'
      000088 53                     188 	.db #0x53	; 83	'S'
      000089 20                     189 	.db #0x20	; 32
                                    190 ;src/test_impl/gblink.c:37: void receive_data_str()
                                    191 ;	---------------------------------
                                    192 ; Function receive_data_str
                                    193 ; ---------------------------------
      00008A                        194 _receive_data_str::
      00008A 3B                     195 	dec	sp
      00008B 3B                     196 	dec	sp
                                    197 ;src/test_impl/gblink.c:40: uint8_t recv_x = 0;
                                    198 ;src/test_impl/gblink.c:41: for (int i = 0; i < 0x30; ++i)
      00008C 01 00 05               199 	ld	bc, #0x500
      00008F AF                     200 	xor	a, a
      000090 F8 00                  201 	ldhl	sp,	#0
      000092 22                     202 	ld	(hl+), a
      000093 77                     203 	ld	(hl), a
      000094                        204 00111$:
      000094 F8 00                  205 	ldhl	sp,	#0
      000096 2A                     206 	ld	a, (hl+)
      000097 D6 30                  207 	sub	a, #0x30
      000099 7E                     208 	ld	a, (hl)
      00009A DE 00                  209 	sbc	a, #0x00
      00009C 56                     210 	ld	d, (hl)
      00009D 3E 00                  211 	ld	a, #0x00
      00009F CB 7F                  212 	bit	7,a
      0000A1 28 07                  213 	jr	Z, 00145$
      0000A3 CB 7A                  214 	bit	7, d
      0000A5 20 08                  215 	jr	NZ, 00146$
      0000A7 BF                     216 	cp	a, a
      0000A8 18 05                  217 	jr	00146$
      0000AA                        218 00145$:
      0000AA CB 7A                  219 	bit	7, d
      0000AC 28 01                  220 	jr	Z, 00146$
      0000AE 37                     221 	scf
      0000AF                        222 00146$:
      0000AF 30 5C                  223 	jr	NC, 00113$
                                    224 ;src/test_impl/gblink.c:43: receive_byte();
      0000B1 C5                     225 	push	bc
      0000B2 CDr00r00               226 	call	_receive_byte
      0000B5 C1                     227 	pop	bc
                                    228 ;src/test_impl/gblink.c:45: while (_io_status == IO_RECEIVING);
      0000B6                        229 00101$:
      0000B6 FAr00r00               230 	ld	a, (#__io_status)
      0000B9 D6 02                  231 	sub	a, #0x02
      0000BB 28 F9                  232 	jr	Z, 00101$
                                    233 ;src/test_impl/gblink.c:46: if (_io_status == IO_ERROR) {
      0000BD FAr00r00               234 	ld	a, (#__io_status)
      0000C0 D6 04                  235 	sub	a, #0x04
      0000C2 20 14                  236 	jr	NZ, 00105$
                                    237 ;src/test_impl/gblink.c:47: text_print_string_bkg(1, 4, "failed to comm...");
      0000C4 11r10r01               238 	ld	de, #___str_0
      0000C7 D5                     239 	push	de
      0000C8 21 01 04               240 	ld	hl, #0x401
      0000CB E5                     241 	push	hl
      0000CC 1Er00                  242 	ld	e, #b_text_print_string_bkg
      0000CE 21r00r00               243 	ld	hl, #_text_print_string_bkg
      0000D1 CDr00r00               244 	call	___sdcc_bcall_ehl
      0000D4 E8 04                  245 	add	sp, #4
                                    246 ;src/test_impl/gblink.c:48: break;
      0000D6 18 35                  247 	jr	00113$
      0000D8                        248 00105$:
                                    249 ;src/test_impl/gblink.c:50: text_print_char_bkg(recv_x, recv_y, _io_in);
      0000D8 C5                     250 	push	bc
      0000D9 FAr00r00               251 	ld	a, (#__io_in)
      0000DC F5                     252 	push	af
      0000DD 33                     253 	inc	sp
      0000DE C5                     254 	push	bc
      0000DF 1Er00                  255 	ld	e, #b_text_print_char_bkg
      0000E1 21r00r00               256 	ld	hl, #_text_print_char_bkg
      0000E4 CDr00r00               257 	call	___sdcc_bcall_ehl
      0000E7 E8 03                  258 	add	sp, #3
      0000E9 11 10 00               259 	ld	de, #0x0010
      0000EC D5                     260 	push	de
      0000ED F8 04                  261 	ldhl	sp,	#4
      0000EF 2A                     262 	ld	a, (hl+)
      0000F0 5F                     263 	ld	e, a
      0000F1 56                     264 	ld	d, (hl)
      0000F2 D5                     265 	push	de
      0000F3 CDr00r00               266 	call	__modsint
      0000F6 E8 04                  267 	add	sp, #4
      0000F8 6B                     268 	ld	l, e
                                    269 ;	spillPairReg hl
                                    270 ;	spillPairReg hl
      0000F9 C1                     271 	pop	bc
      0000FA 7A                     272 	ld	a, d
      0000FB B5                     273 	or	a, l
      0000FC 20 05                  274 	jr	NZ, 00107$
                                    275 ;src/test_impl/gblink.c:52: recv_y++;
      0000FE 04                     276 	inc	b
                                    277 ;src/test_impl/gblink.c:53: recv_x = 0;
      0000FF 0E 00                  278 	ld	c, #0x00
      000101 18 01                  279 	jr	00112$
      000103                        280 00107$:
                                    281 ;src/test_impl/gblink.c:55: recv_x++;
      000103 0C                     282 	inc	c
      000104                        283 00112$:
                                    284 ;src/test_impl/gblink.c:41: for (int i = 0; i < 0x30; ++i)
      000104 F8 00                  285 	ldhl	sp,	#0
      000106 34                     286 	inc	(hl)
      000107 20 8B                  287 	jr	NZ, 00111$
      000109 23                     288 	inc	hl
      00010A 34                     289 	inc	(hl)
      00010B 18 87                  290 	jr	00111$
      00010D                        291 00113$:
                                    292 ;src/test_impl/gblink.c:58: }
      00010D 33                     293 	inc	sp
      00010E 33                     294 	inc	sp
      00010F C9                     295 	ret
      000110                        296 ___str_0:
      000110 66 61 69 6C 65 64 20   297 	.ascii "failed to comm..."
             74 6F 20 63 6F 6D 6D
             2E 2E 2E
      000121 00                     298 	.db 0x00
                                    299 ;src/test_impl/gblink.c:60: void wait_for_start()
                                    300 ;	---------------------------------
                                    301 ; Function wait_for_start
                                    302 ; ---------------------------------
      000122                        303 _wait_for_start::
      000122 E8 FA                  304 	add	sp, #-6
                                    305 ;src/test_impl/gblink.c:62: UBYTE start[4] = { 0x73, 0x74, 0x72, 0x74 };
      000124 F8 00                  306 	ldhl	sp,	#0
      000126 7D                     307 	ld	a, l
      000127 54                     308 	ld	d, h
      000128 F8 04                  309 	ldhl	sp,	#4
      00012A 22                     310 	ld	(hl+), a
      00012B 7A                     311 	ld	a, d
      00012C 32                     312 	ld	(hl-), a
      00012D 2A                     313 	ld	a,	(hl+)
      00012E 66                     314 	ld	h, (hl)
      00012F 6F                     315 	ld	l, a
      000130 36 73                  316 	ld	(hl), #0x73
      000132 F8 04                  317 	ldhl	sp,	#4
      000134 2A                     318 	ld	a, (hl+)
      000135 4F                     319 	ld	c, a
      000136 3A                     320 	ld	a, (hl-)
      000137 47                     321 	ld	b, a
      000138 03                     322 	inc	bc
      000139 3E 74                  323 	ld	a, #0x74
      00013B 02                     324 	ld	(bc), a
      00013C 2A                     325 	ld	a, (hl+)
      00013D 4F                     326 	ld	c, a
      00013E 3A                     327 	ld	a, (hl-)
      00013F 47                     328 	ld	b, a
      000140 03                     329 	inc	bc
      000141 03                     330 	inc	bc
      000142 3E 72                  331 	ld	a, #0x72
      000144 02                     332 	ld	(bc), a
      000145 2A                     333 	ld	a, (hl+)
      000146 4F                     334 	ld	c, a
      000147 46                     335 	ld	b, (hl)
      000148 03                     336 	inc	bc
      000149 03                     337 	inc	bc
      00014A 03                     338 	inc	bc
      00014B 3E 74                  339 	ld	a, #0x74
      00014D 02                     340 	ld	(bc), a
                                    341 ;src/test_impl/gblink.c:64: for (int i = 0; i < 4; ++i)
      00014E 01 00 00               342 	ld	bc, #0x0000
      000151                        343 00110$:
      000151 79                     344 	ld	a, c
      000152 D6 04                  345 	sub	a, #0x04
      000154 78                     346 	ld	a, b
      000155 17                     347 	rla
      000156 3F                     348 	ccf
      000157 1F                     349 	rra
      000158 DE 80                  350 	sbc	a, #0x80
      00015A 30 42                  351 	jr	NC, 00108$
                                    352 ;src/test_impl/gblink.c:66: receive_byte();
      00015C C5                     353 	push	bc
      00015D CDr00r00               354 	call	_receive_byte
      000160 C1                     355 	pop	bc
                                    356 ;src/test_impl/gblink.c:68: while (_io_status == IO_RECEIVING);
      000161                        357 00101$:
      000161 FAr00r00               358 	ld	a, (#__io_status)
      000164 D6 02                  359 	sub	a, #0x02
      000166 28 F9                  360 	jr	Z, 00101$
                                    361 ;src/test_impl/gblink.c:69: if (_io_status == IO_ERROR) {
      000168 FAr00r00               362 	ld	a, (#__io_status)
      00016B D6 04                  363 	sub	a, #0x04
      00016D 20 0A                  364 	jr	NZ, 00105$
                                    365 ;src/test_impl/gblink.c:70: printf("i/o error!\n");
      00016F 11rA9r01               366 	ld	de, #___str_2
      000172 D5                     367 	push	de
      000173 CDr00r00               368 	call	_puts
      000176 E1                     369 	pop	hl
                                    370 ;src/test_impl/gblink.c:71: break;
      000177 18 25                  371 	jr	00108$
      000179                        372 00105$:
                                    373 ;src/test_impl/gblink.c:73: if (_io_in == start[i]) {
      000179 F8 04                  374 	ldhl	sp,	#4
      00017B 2A                     375 	ld	a,	(hl+)
      00017C 66                     376 	ld	h, (hl)
      00017D 6F                     377 	ld	l, a
      00017E 09                     378 	add	hl, bc
      00017F 5D                     379 	ld	e, l
      000180 54                     380 	ld	d, h
      000181 1A                     381 	ld	a, (de)
      000182 5F                     382 	ld	e, a
      000183 FAr00r00               383 	ld	a, (#__io_in)
      000186 93                     384 	sub	a, e
      000187 20 12                  385 	jr	NZ, 00111$
                                    386 ;src/test_impl/gblink.c:74: printf("%c", _io_in);
      000189 21r00r00               387 	ld	hl, #__io_in
      00018C 5E                     388 	ld	e, (hl)
      00018D 16 00                  389 	ld	d, #0x00
      00018F C5                     390 	push	bc
      000190 D5                     391 	push	de
      000191 11rB4r01               392 	ld	de, #___str_3
      000194 D5                     393 	push	de
      000195 CDr00r00               394 	call	_printf
      000198 E8 04                  395 	add	sp, #4
      00019A C1                     396 	pop	bc
      00019B                        397 00111$:
                                    398 ;src/test_impl/gblink.c:64: for (int i = 0; i < 4; ++i)
      00019B 03                     399 	inc	bc
      00019C 18 B3                  400 	jr	00110$
      00019E                        401 00108$:
                                    402 ;src/test_impl/gblink.c:77: printf("\n"); 
      00019E 11rB7r01               403 	ld	de, #___str_5
      0001A1 D5                     404 	push	de
      0001A2 CDr00r00               405 	call	_puts
      0001A5 E1                     406 	pop	hl
                                    407 ;src/test_impl/gblink.c:78: }
      0001A6 E8 06                  408 	add	sp, #6
      0001A8 C9                     409 	ret
      0001A9                        410 ___str_2:
      0001A9 69 2F 6F 20 65 72 72   411 	.ascii "i/o error!"
             6F 72 21
      0001B3 00                     412 	.db 0x00
      0001B4                        413 ___str_3:
      0001B4 25 63                  414 	.ascii "%c"
      0001B6 00                     415 	.db 0x00
      0001B7                        416 ___str_5:
      0001B7 00                     417 	.db 0x00
                                    418 ;src/test_impl/gblink.c:80: void send_data_str()
                                    419 ;	---------------------------------
                                    420 ; Function send_data_str
                                    421 ; ---------------------------------
      0001B8                        422 _send_data_str::
      0001B8 3B                     423 	dec	sp
                                    424 ;src/test_impl/gblink.c:82: for (int i = 0; i < 0x30; ++i)
      0001B9 01 00 00               425 	ld	bc, #0x0000
      0001BC                        426 00111$:
      0001BC 79                     427 	ld	a, c
      0001BD D6 30                  428 	sub	a, #0x30
      0001BF 78                     429 	ld	a, b
      0001C0 17                     430 	rla
      0001C1 3F                     431 	ccf
      0001C2 1F                     432 	rra
      0001C3 DE 80                  433 	sbc	a, #0x80
      0001C5 30 5B                  434 	jr	NC, 00109$
                                    435 ;src/test_impl/gblink.c:84: _io_out = test_data_str[i];
      0001C7 21r5Ar00               436 	ld	hl, #_test_data_str
      0001CA 09                     437 	add	hl, bc
      0001CB 7E                     438 	ld	a, (hl)
      0001CC EAr00r00               439 	ld	(#__io_out),a
                                    440 ;src/test_impl/gblink.c:85: send_byte();
      0001CF C5                     441 	push	bc
      0001D0 CDr00r00               442 	call	_send_byte
      0001D3 C1                     443 	pop	bc
                                    444 ;src/test_impl/gblink.c:86: while(_io_status == IO_SENDING);
      0001D4                        445 00101$:
      0001D4 FAr00r00               446 	ld	a, (#__io_status)
      0001D7 3D                     447 	dec	a
      0001D8 28 FA                  448 	jr	Z, 00101$
                                    449 ;src/test_impl/gblink.c:87: if (_io_status == IO_ERROR) {
      0001DA FAr00r00               450 	ld	a, (#__io_status)
      0001DD D6 04                  451 	sub	a, #0x04
      0001DF 20 0A                  452 	jr	NZ, 00105$
                                    453 ;src/test_impl/gblink.c:88: printf("i/o error!\n");
      0001E1 11r2Cr02               454 	ld	de, #___str_7
      0001E4 D5                     455 	push	de
      0001E5 CDr00r00               456 	call	_puts
      0001E8 E1                     457 	pop	hl
                                    458 ;src/test_impl/gblink.c:89: break;
      0001E9 18 37                  459 	jr	00109$
      0001EB                        460 00105$:
                                    461 ;src/test_impl/gblink.c:91: if (test_data_str[i] == 0x20) {
      0001EB 21r5Ar00               462 	ld	hl, #_test_data_str
      0001EE 09                     463 	add	hl, bc
      0001EF 7E                     464 	ld	a, (hl)
      0001F0 F8 00                  465 	ldhl	sp,#0
      0001F2 77                     466 	ld	(hl), a
      0001F3 7E                     467 	ld	a, (hl)
      0001F4 D6 20                  468 	sub	a, #0x20
      0001F6 20 0C                  469 	jr	NZ, 00107$
                                    470 ;src/test_impl/gblink.c:92: printf("\n");
      0001F8 C5                     471 	push	bc
      0001F9 11r37r02               472 	ld	de, #___str_9
      0001FC D5                     473 	push	de
      0001FD CDr00r00               474 	call	_puts
      000200 E1                     475 	pop	hl
      000201 C1                     476 	pop	bc
      000202 18 11                  477 	jr	00108$
      000204                        478 00107$:
                                    479 ;src/test_impl/gblink.c:94: printf("%c", test_data_str[i]);
      000204 F8 00                  480 	ldhl	sp,	#0
      000206 5E                     481 	ld	e, (hl)
      000207 16 00                  482 	ld	d, #0x00
      000209 C5                     483 	push	bc
      00020A D5                     484 	push	de
      00020B 11r38r02               485 	ld	de, #___str_10
      00020E D5                     486 	push	de
      00020F CDr00r00               487 	call	_printf
      000212 E8 04                  488 	add	sp, #4
      000214 C1                     489 	pop	bc
      000215                        490 00108$:
                                    491 ;src/test_impl/gblink.c:96: delay(100);
      000215 C5                     492 	push	bc
      000216 11 64 00               493 	ld	de, #0x0064
      000219 D5                     494 	push	de
      00021A CDr00r00               495 	call	_delay
      00021D E1                     496 	pop	hl
      00021E C1                     497 	pop	bc
                                    498 ;src/test_impl/gblink.c:82: for (int i = 0; i < 0x30; ++i)
      00021F 03                     499 	inc	bc
      000220 18 9A                  500 	jr	00111$
      000222                        501 00109$:
                                    502 ;src/test_impl/gblink.c:98: printf("\n"); 
      000222 11r37r02               503 	ld	de, #___str_9
      000225 D5                     504 	push	de
      000226 CDr00r00               505 	call	_puts
      000229 E1                     506 	pop	hl
                                    507 ;src/test_impl/gblink.c:99: }
      00022A 33                     508 	inc	sp
      00022B C9                     509 	ret
      00022C                        510 ___str_7:
      00022C 69 2F 6F 20 65 72 72   511 	.ascii "i/o error!"
             6F 72 21
      000236 00                     512 	.db 0x00
      000237                        513 ___str_9:
      000237 00                     514 	.db 0x00
      000238                        515 ___str_10:
      000238 25 63                  516 	.ascii "%c"
      00023A 00                     517 	.db 0x00
                                    518 ;src/test_impl/gblink.c:101: BANKREF(superuser_hold)
                                    519 ;	---------------------------------
                                    520 ; Function __func_superuser_hold
                                    521 ; ---------------------------------
                           000001   522 	b___func_superuser_hold	= 1
      00023B                        523 ___func_superuser_hold::
                                    524 	.local b___func_superuser_hold 
                           000001   525 	___bank_superuser_hold = b___func_superuser_hold 
                                    526 	.globl ___bank_superuser_hold 
                                    527 ;src/test_impl/gblink.c:102: int superuser_hold() BANKED
                                    528 ;	---------------------------------
                                    529 ; Function superuser_hold
                                    530 ; ---------------------------------
                           000001   531 	b_superuser_hold	= 1
      00023B                        532 _superuser_hold::
                                    533 ;src/test_impl/gblink.c:104: PRINT_FUNC_INFO;
      00023B F0r00                  534 	ldh	a, (__current_bank + 0)
      00023D 4F                     535 	ld	c, a
      00023E 06 00                  536 	ld	b, #0x00
      000240 C5                     537 	push	bc
      000241 11rDFr02               538 	ld	de, #___str_14
      000244 D5                     539 	push	de
      000245 11 68 00               540 	ld	de, #0x0068
      000248 D5                     541 	push	de
      000249 11rC8r02               542 	ld	de, #___str_13
      00024C D5                     543 	push	de
      00024D 11rACr02               544 	ld	de, #___str_12
      000250 D5                     545 	push	de
      000251 CDr00r00               546 	call	_EMU_printf
      000254 E8 0A                  547 	add	sp, #10
                                    548 ;src/test_impl/gblink.c:105: int isSuper = 0;
      000256 01 00 00               549 	ld	bc, #0x0000
                                    550 ;src/test_impl/gblink.c:107: while (delayInc > 0) {
      000259 21 02 00               551 	ld	hl, #0x0002
      00025C                        552 00105$:
      00025C 5C                     553 	ld	e, h
      00025D AF                     554 	xor	a, a
      00025E 57                     555 	ld	d, a
      00025F BD                     556 	cp	a, l
      000260 9C                     557 	sbc	a, h
      000261 CB 7B                  558 	bit	7, e
      000263 28 07                  559 	jr	Z, 00130$
      000265 CB 7A                  560 	bit	7, d
      000267 20 08                  561 	jr	NZ, 00131$
      000269 BF                     562 	cp	a, a
      00026A 18 05                  563 	jr	00131$
      00026C                        564 00130$:
      00026C CB 7A                  565 	bit	7, d
      00026E 28 01                  566 	jr	Z, 00131$
      000270 37                     567 	scf
      000271                        568 00131$:
      000271 30 36                  569 	jr	NC, 00107$
                                    570 ;src/test_impl/gblink.c:111: if (joypad() & J_START && joypad() & J_SELECT) {
      000273 E5                     571 	push	hl
      000274 CDr00r00               572 	call	_joypad
      000277 7B                     573 	ld	a, e
      000278 E1                     574 	pop	hl
      000279 07                     575 	rlca
      00027A 30 1B                  576 	jr	NC, 00102$
      00027C E5                     577 	push	hl
      00027D CDr00r00               578 	call	_joypad
      000280 E1                     579 	pop	hl
      000281 CB 73                  580 	bit	6, e
      000283 28 12                  581 	jr	Z, 00102$
                                    582 ;src/test_impl/gblink.c:112: isSuper = 1;
      000285 01 01 00               583 	ld	bc, #0x0001
                                    584 ;src/test_impl/gblink.c:113: printf("you are super.\n");
      000288 C5                     585 	push	bc
      000289 11rEEr02               586 	ld	de, #___str_16
      00028C D5                     587 	push	de
      00028D CDr00r00               588 	call	_puts
      000290 E1                     589 	pop	hl
      000291 C1                     590 	pop	bc
                                    591 ;src/test_impl/gblink.c:114: waitpadup();
      000292 CDr00r00               592 	call	_waitpadup
                                    593 ;src/test_impl/gblink.c:115: break;
      000295 18 12                  594 	jr	00107$
      000297                        595 00102$:
                                    596 ;src/test_impl/gblink.c:117: isSuper = 0;
                                    597 ;src/test_impl/gblink.c:119: delayInc--;
      000297 2B                     598 	dec	hl
      000298 01 00 00               599 	ld	bc, #0x0000
                                    600 ;src/test_impl/gblink.c:120: delay(1000);
      00029B E5                     601 	push	hl
      00029C C5                     602 	push	bc
      00029D 11 E8 03               603 	ld	de, #0x03e8
      0002A0 D5                     604 	push	de
      0002A1 CDr00r00               605 	call	_delay
      0002A4 E1                     606 	pop	hl
      0002A5 C1                     607 	pop	bc
      0002A6 E1                     608 	pop	hl
      0002A7 18 B3                  609 	jr	00105$
      0002A9                        610 00107$:
                                    611 ;src/test_impl/gblink.c:122: return isSuper;
      0002A9 59                     612 	ld	e, c
      0002AA 50                     613 	ld	d, b
                                    614 ;src/test_impl/gblink.c:123: }
      0002AB C9                     615 	ret
      0002AC                        616 ___str_12:
      0002AC 5B 44 42 47 5D 20 25   617 	.ascii "[DBG] %s:%d @ %s() bank: %d"
             73 3A 25 64 20 40 20
             25 73 28 29 20 62 61
             6E 6B 3A 20 25 64
      0002C7 00                     618 	.db 0x00
      0002C8                        619 ___str_13:
      0002C8 73 72 63 2F 74 65 73   620 	.ascii "src/test_impl/gblink.c"
             74 5F 69 6D 70 6C 2F
             67 62 6C 69 6E 6B 2E
             63
      0002DE 00                     621 	.db 0x00
      0002DF                        622 ___str_14:
      0002DF 73 75 70 65 72 75 73   623 	.ascii "superuser_hold"
             65 72 5F 68 6F 6C 64
      0002ED 00                     624 	.db 0x00
      0002EE                        625 ___str_16:
      0002EE 79 6F 75 20 61 72 65   626 	.ascii "you are super."
             20 73 75 70 65 72 2E
      0002FC 00                     627 	.db 0x00
                                    628 ;src/test_impl/gblink.c:125: BANKREF(superuser_enter_hostmode)
                                    629 ;	---------------------------------
                                    630 ; Function __func_superuser_enter_hostmode
                                    631 ; ---------------------------------
                           000001   632 	b___func_superuser_enter_hostmode	= 1
      0002FD                        633 ___func_superuser_enter_hostmode::
                                    634 	.local b___func_superuser_enter_hostmode 
                           000001   635 	___bank_superuser_enter_hostmode = b___func_superuser_enter_hostmode 
                                    636 	.globl ___bank_superuser_enter_hostmode 
                                    637 ;src/test_impl/gblink.c:126: void superuser_enter_hostmode() BANKED
                                    638 ;	---------------------------------
                                    639 ; Function superuser_enter_hostmode
                                    640 ; ---------------------------------
                           000001   641 	b_superuser_enter_hostmode	= 1
      0002FD                        642 _superuser_enter_hostmode::
                                    643 ;src/test_impl/gblink.c:128: PRINT_FUNC_INFO;
      0002FD F0r00                  644 	ldh	a, (__current_bank + 0)
      0002FF 4F                     645 	ld	c, a
      000300 06 00                  646 	ld	b, #0x00
      000302 C5                     647 	push	bc
      000303 11r77r03               648 	ld	de, #___str_19
      000306 D5                     649 	push	de
      000307 AF                     650 	xor	a, a
      000308 F5                     651 	push	af
      000309 11r60r03               652 	ld	de, #___str_18
      00030C D5                     653 	push	de
      00030D 11r44r03               654 	ld	de, #___str_17
      000310 D5                     655 	push	de
      000311 CDr00r00               656 	call	_EMU_printf
      000314 E8 0A                  657 	add	sp, #10
                                    658 ;src/test_impl/gblink.c:130: while(1) {
      000316                        659 00102$:
                                    660 ;src/test_impl/gblink.c:131: cls();
      000316 CDr00r00               661 	call	_cls
                                    662 ;src/test_impl/gblink.c:132: printf("\n(SUPERUSER)\n\nwaiting for init\n");
      000319 11r90r03               663 	ld	de, #___str_21
      00031C D5                     664 	push	de
      00031D CDr00r00               665 	call	_puts
      000320 E1                     666 	pop	hl
                                    667 ;src/test_impl/gblink.c:133: wait_for_start();
      000321 CDr22r01               668 	call	_wait_for_start
                                    669 ;src/test_impl/gblink.c:134: printf("received init!\nsending test str\n");
      000324 11rAFr03               670 	ld	de, #___str_23
      000327 D5                     671 	push	de
      000328 CDr00r00               672 	call	_puts
      00032B E1                     673 	pop	hl
                                    674 ;src/test_impl/gblink.c:135: delay(100);
      00032C 11 64 00               675 	ld	de, #0x0064
      00032F D5                     676 	push	de
      000330 CDr00r00               677 	call	_delay
      000333 E1                     678 	pop	hl
                                    679 ;src/test_impl/gblink.c:136: send_data_str();
      000334 CDrB8r01               680 	call	_send_data_str
                                    681 ;src/test_impl/gblink.c:137: delay(5000);
      000337 11 88 13               682 	ld	de, #0x1388
      00033A D5                     683 	push	de
      00033B CDr00r00               684 	call	_delay
      00033E E1                     685 	pop	hl
                                    686 ;src/test_impl/gblink.c:138: wait_vbl_done();
      00033F CDr00r00               687 	call	_wait_vbl_done
                                    688 ;src/test_impl/gblink.c:140: }
      000342 18 D2                  689 	jr	00102$
      000344                        690 ___str_17:
      000344 5B 44 42 47 5D 20 25   691 	.ascii "[DBG] %s:%d @ %s() bank: %d"
             73 3A 25 64 20 40 20
             25 73 28 29 20 62 61
             6E 6B 3A 20 25 64
      00035F 00                     692 	.db 0x00
      000360                        693 ___str_18:
      000360 73 72 63 2F 74 65 73   694 	.ascii "src/test_impl/gblink.c"
             74 5F 69 6D 70 6C 2F
             67 62 6C 69 6E 6B 2E
             63
      000376 00                     695 	.db 0x00
      000377                        696 ___str_19:
      000377 73 75 70 65 72 75 73   697 	.ascii "superuser_enter_hostmode"
             65 72 5F 65 6E 74 65
             72 5F 68 6F 73 74 6D
             6F 64 65
      00038F 00                     698 	.db 0x00
      000390                        699 ___str_21:
      000390 0A                     700 	.db 0x0a
      000391 28 53 55 50 45 52 55   701 	.ascii "(SUPERUSER)"
             53 45 52 29
      00039C 0A                     702 	.db 0x0a
      00039D 0A                     703 	.db 0x0a
      00039E 77 61 69 74 69 6E 67   704 	.ascii "waiting for init"
             20 66 6F 72 20 69 6E
             69 74
      0003AE 00                     705 	.db 0x00
      0003AF                        706 ___str_23:
      0003AF 72 65 63 65 69 76 65   707 	.ascii "received init!"
             64 20 69 6E 69 74 21
      0003BD 0A                     708 	.db 0x0a
      0003BE 73 65 6E 64 69 6E 67   709 	.ascii "sending test str"
             20 74 65 73 74 20 73
             74 72
      0003CE 00                     710 	.db 0x00
                                    711 ;src/test_impl/gblink.c:142: BANKREF(gblink_test)
                                    712 ;	---------------------------------
                                    713 ; Function __func_gblink_test
                                    714 ; ---------------------------------
                           000001   715 	b___func_gblink_test	= 1
      0003CF                        716 ___func_gblink_test::
                                    717 	.local b___func_gblink_test 
                           000001   718 	___bank_gblink_test = b___func_gblink_test 
                                    719 	.globl ___bank_gblink_test 
                                    720 ;src/test_impl/gblink.c:143: int gblink_test() BANKED 
                                    721 ;	---------------------------------
                                    722 ; Function gblink_test
                                    723 ; ---------------------------------
                           000001   724 	b_gblink_test	= 1
      0003CF                        725 _gblink_test::
      0003CF E8 FA                  726 	add	sp, #-6
                                    727 ;src/test_impl/gblink.c:145: PRINT_FUNC_INFO;
      0003D1 F0r00                  728 	ldh	a, (__current_bank + 0)
      0003D3 4F                     729 	ld	c, a
      0003D4 06 00                  730 	ld	b, #0x00
      0003D6 C5                     731 	push	bc
      0003D7 11rC7r04               732 	ld	de, #___str_26
      0003DA D5                     733 	push	de
      0003DB 11 91 00               734 	ld	de, #0x0091
      0003DE D5                     735 	push	de
      0003DF 11rB0r04               736 	ld	de, #___str_25
      0003E2 D5                     737 	push	de
      0003E3 11r94r04               738 	ld	de, #___str_24
      0003E6 D5                     739 	push	de
      0003E7 CDr00r00               740 	call	_EMU_printf
      0003EA E8 0A                  741 	add	sp, #10
                                    742 ;src/test_impl/gblink.c:146: show_gblink_background();
      0003EC CDr00r00               743 	call	_show_gblink_background
                                    744 ;src/test_impl/gblink.c:149: UBYTE start[4] = { 0x73, 0x74, 0x72, 0x74 };
      0003EF F8 00                  745 	ldhl	sp,	#0
      0003F1 7D                     746 	ld	a, l
      0003F2 54                     747 	ld	d, h
      0003F3 F8 04                  748 	ldhl	sp,	#4
      0003F5 22                     749 	ld	(hl+), a
      0003F6 7A                     750 	ld	a, d
      0003F7 32                     751 	ld	(hl-), a
      0003F8 2A                     752 	ld	a,	(hl+)
      0003F9 66                     753 	ld	h, (hl)
      0003FA 6F                     754 	ld	l, a
      0003FB 36 73                  755 	ld	(hl), #0x73
      0003FD F8 04                  756 	ldhl	sp,	#4
      0003FF 2A                     757 	ld	a, (hl+)
      000400 4F                     758 	ld	c, a
      000401 3A                     759 	ld	a, (hl-)
      000402 47                     760 	ld	b, a
      000403 03                     761 	inc	bc
      000404 3E 74                  762 	ld	a, #0x74
      000406 02                     763 	ld	(bc), a
      000407 2A                     764 	ld	a, (hl+)
      000408 4F                     765 	ld	c, a
      000409 3A                     766 	ld	a, (hl-)
      00040A 47                     767 	ld	b, a
      00040B 03                     768 	inc	bc
      00040C 03                     769 	inc	bc
      00040D 3E 72                  770 	ld	a, #0x72
      00040F 02                     771 	ld	(bc), a
      000410 2A                     772 	ld	a, (hl+)
      000411 4F                     773 	ld	c, a
      000412 46                     774 	ld	b, (hl)
      000413 03                     775 	inc	bc
      000414 03                     776 	inc	bc
      000415 03                     777 	inc	bc
      000416 3E 74                  778 	ld	a, #0x74
      000418 02                     779 	ld	(bc), a
                                    780 ;src/test_impl/gblink.c:150: for (int i = 0; i < 4; ++i)
      000419 01 00 00               781 	ld	bc, #0x0000
      00041C                        782 00108$:
      00041C 79                     783 	ld	a, c
      00041D D6 04                  784 	sub	a, #0x04
      00041F 78                     785 	ld	a, b
      000420 17                     786 	rla
      000421 3F                     787 	ccf
      000422 1F                     788 	rra
      000423 DE 80                  789 	sbc	a, #0x80
      000425 30 4A                  790 	jr	NC, 00106$
                                    791 ;src/test_impl/gblink.c:152: _io_out = start[i];
      000427 F8 04                  792 	ldhl	sp,	#4
      000429 2A                     793 	ld	a,	(hl+)
      00042A 66                     794 	ld	h, (hl)
      00042B 6F                     795 	ld	l, a
      00042C 09                     796 	add	hl, bc
      00042D 5D                     797 	ld	e, l
      00042E 54                     798 	ld	d, h
      00042F 1A                     799 	ld	a, (de)
      000430 EAr00r00               800 	ld	(#__io_out),a
                                    801 ;src/test_impl/gblink.c:153: send_byte();
      000433 C5                     802 	push	bc
      000434 CDr00r00               803 	call	_send_byte
      000437 C1                     804 	pop	bc
                                    805 ;src/test_impl/gblink.c:154: while (_io_status == IO_SENDING) 
      000438                        806 00101$:
      000438 FAr00r00               807 	ld	a, (#__io_status)
      00043B 3D                     808 	dec	a
      00043C 28 FA                  809 	jr	Z, 00101$
                                    810 ;src/test_impl/gblink.c:158: if (_io_status == IO_ERROR)
      00043E FAr00r00               811 	ld	a, (#__io_status)
      000441 D6 04                  812 	sub	a, #0x04
      000443 20 1F                  813 	jr	NZ, 00105$
                                    814 ;src/test_impl/gblink.c:160: text_print_string_bkg(1, 4, "failed to comm...");
      000445 11rD3r04               815 	ld	de, #___str_27
      000448 D5                     816 	push	de
      000449 21 01 04               817 	ld	hl, #0x401
      00044C E5                     818 	push	hl
      00044D 1Er00                  819 	ld	e, #b_text_print_string_bkg
      00044F 21r00r00               820 	ld	hl, #_text_print_string_bkg
      000452 CDr00r00               821 	call	___sdcc_bcall_ehl
      000455 E8 04                  822 	add	sp, #4
                                    823 ;src/test_impl/gblink.c:162: delay(2000);
      000457 11 D0 07               824 	ld	de, #0x07d0
      00045A D5                     825 	push	de
      00045B CDr00r00               826 	call	_delay
      00045E E1                     827 	pop	hl
                                    828 ;src/test_impl/gblink.c:163: return TEST_FAILED;
      00045F 11 69 00               829 	ld	de, #0x0069
      000462 18 2D                  830 	jr	00110$
      000464                        831 00105$:
                                    832 ;src/test_impl/gblink.c:165: delay(100);
      000464 C5                     833 	push	bc
      000465 11 64 00               834 	ld	de, #0x0064
      000468 D5                     835 	push	de
      000469 CDr00r00               836 	call	_delay
      00046C E1                     837 	pop	hl
      00046D C1                     838 	pop	bc
                                    839 ;src/test_impl/gblink.c:150: for (int i = 0; i < 4; ++i)
      00046E 03                     840 	inc	bc
      00046F 18 AB                  841 	jr	00108$
      000471                        842 00106$:
                                    843 ;src/test_impl/gblink.c:168: text_print_string_bkg(1, 4, "initiated comm...");
      000471 11rE5r04               844 	ld	de, #___str_28
      000474 D5                     845 	push	de
      000475 21 01 04               846 	ld	hl, #0x401
      000478 E5                     847 	push	hl
      000479 1Er00                  848 	ld	e, #b_text_print_string_bkg
      00047B 21r00r00               849 	ld	hl, #_text_print_string_bkg
      00047E CDr00r00               850 	call	___sdcc_bcall_ehl
      000481 E8 04                  851 	add	sp, #4
                                    852 ;src/test_impl/gblink.c:169: receive_data_str();
      000483 CDr8Ar00               853 	call	_receive_data_str
                                    854 ;src/test_impl/gblink.c:170: delay(1000);
      000486 11 E8 03               855 	ld	de, #0x03e8
      000489 D5                     856 	push	de
      00048A CDr00r00               857 	call	_delay
      00048D E1                     858 	pop	hl
                                    859 ;src/test_impl/gblink.c:171: return TEST_PASSED;
      00048E 11 25 00               860 	ld	de, #0x0025
      000491                        861 00110$:
                                    862 ;src/test_impl/gblink.c:172: } 
      000491 E8 06                  863 	add	sp, #6
      000493 C9                     864 	ret
      000494                        865 ___str_24:
      000494 5B 44 42 47 5D 20 25   866 	.ascii "[DBG] %s:%d @ %s() bank: %d"
             73 3A 25 64 20 40 20
             25 73 28 29 20 62 61
             6E 6B 3A 20 25 64
      0004AF 00                     867 	.db 0x00
      0004B0                        868 ___str_25:
      0004B0 73 72 63 2F 74 65 73   869 	.ascii "src/test_impl/gblink.c"
             74 5F 69 6D 70 6C 2F
             67 62 6C 69 6E 6B 2E
             63
      0004C6 00                     870 	.db 0x00
      0004C7                        871 ___str_26:
      0004C7 67 62 6C 69 6E 6B 5F   872 	.ascii "gblink_test"
             74 65 73 74
      0004D2 00                     873 	.db 0x00
      0004D3                        874 ___str_27:
      0004D3 66 61 69 6C 65 64 20   875 	.ascii "failed to comm..."
             74 6F 20 63 6F 6D 6D
             2E 2E 2E
      0004E4 00                     876 	.db 0x00
      0004E5                        877 ___str_28:
      0004E5 69 6E 69 74 69 61 74   878 	.ascii "initiated comm..."
             65 64 20 63 6F 6D 6D
             2E 2E 2E
      0004F6 00                     879 	.db 0x00
                                    880 	.area _CODE_1
                                    881 	.area _INITIALIZER
      000000                        882 __xinit____EMU_PROFILER_INIT:
      000000r00r00                  883 	.dw _EMU_profiler_message
                                    884 	.area _CABS (ABS)
