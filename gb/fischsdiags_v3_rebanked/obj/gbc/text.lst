                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.6 #12539 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module text
                                      6 	.optsdcc -mgbz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl b___func_text_print_string_bkg
                                     12 	.globl ___func_text_print_string_bkg
                                     13 	.globl b___func_text_print_char_bkg
                                     14 	.globl ___func_text_print_char_bkg
                                     15 	.globl b___func_text_load_font
                                     16 	.globl ___func_text_load_font
                                     17 	.globl _set_bkg_palette
                                     18 	.globl _set_bkg_tiles
                                     19 	.globl _set_bkg_data
                                     20 	.globl b_text_load_font
                                     21 	.globl _text_load_font
                                     22 	.globl b_text_print_char_bkg
                                     23 	.globl _text_print_char_bkg
                                     24 	.globl b_text_print_string_bkg
                                     25 	.globl _text_print_string_bkg
                                     26 ;--------------------------------------------------------
                                     27 ; special function registers
                                     28 ;--------------------------------------------------------
                                     29 ;--------------------------------------------------------
                                     30 ; ram data
                                     31 ;--------------------------------------------------------
                                     32 	.area _DATA
                                     33 ;--------------------------------------------------------
                                     34 ; ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area _INITIALIZED
                                     37 ;--------------------------------------------------------
                                     38 ; absolute external ram data
                                     39 ;--------------------------------------------------------
                                     40 	.area _DABS (ABS)
                                     41 ;--------------------------------------------------------
                                     42 ; global & static initialisations
                                     43 ;--------------------------------------------------------
                                     44 	.area _HOME
                                     45 	.area _GSINIT
                                     46 	.area _GSFINAL
                                     47 	.area _GSINIT
                                     48 ;--------------------------------------------------------
                                     49 ; Home
                                     50 ;--------------------------------------------------------
                                     51 	.area _HOME
                                     52 	.area _HOME
                                     53 ;--------------------------------------------------------
                                     54 ; code
                                     55 ;--------------------------------------------------------
                                     56 	.area _CODE_1
                                     57 ;src/text.c:8: BANKREF(text_load_font)
                                     58 ;	---------------------------------
                                     59 ; Function __func_text_load_font
                                     60 ; ---------------------------------
                           000001    61 	b___func_text_load_font	= 1
      000000                         62 ___func_text_load_font::
                                     63 	.local b___func_text_load_font 
                           000001    64 	___bank_text_load_font = b___func_text_load_font 
                                     65 	.globl ___bank_text_load_font 
                                     66 ;src/text.c:9: void text_load_font() BANKED
                                     67 ;	---------------------------------
                                     68 ; Function text_load_font
                                     69 ; ---------------------------------
                           000001    70 	b_text_load_font	= 1
      000000                         71 _text_load_font::
      000000 E8 F8                   72 	add	sp, #-8
                                     73 ;src/text.c:11: palette_color_t text_font_palettes[4] = {
      000002 F8 00                   74 	ldhl	sp,	#0
      000004 4D                      75 	ld	c,l
      000005 44                      76 	ld	b,h
      000006 3E FF                   77 	ld	a, #0xff
      000008 22                      78 	ld	(hl+), a
      000009 36 7F                   79 	ld	(hl), #0x7f
      00000B 69                      80 	ld	l, c
                                     81 ;	spillPairReg hl
                                     82 ;	spillPairReg hl
      00000C 60                      83 	ld	h, b
                                     84 ;	spillPairReg hl
                                     85 ;	spillPairReg hl
      00000D 23                      86 	inc	hl
      00000E 23                      87 	inc	hl
      00000F 3E 1F                   88 	ld	a, #0x1f
      000011 22                      89 	ld	(hl+), a
      000012 36 00                   90 	ld	(hl), #0x00
      000014 21 04 00                91 	ld	hl, #0x0004
      000017 09                      92 	add	hl, bc
      000018 AF                      93 	xor	a, a
      000019 22                      94 	ld	(hl+), a
      00001A 36 7C                   95 	ld	(hl), #0x7c
      00001C 21 06 00                96 	ld	hl, #0x0006
      00001F 09                      97 	add	hl, bc
      000020 AF                      98 	xor	a, a
      000021 22                      99 	ld	(hl+), a
      000022 77                     100 	ld	(hl), a
                                    101 ;src/text.c:14: set_bkg_palette(0, 1, text_font_palettes);
      000023 C5                     102 	push	bc
      000024 AF                     103 	xor	a, a
      000025 3C                     104 	inc	a
      000026 F5                     105 	push	af
      000027 CDr00r00               106 	call	_set_bkg_palette
      00002A E8 04                  107 	add	sp, #4
                                    108 ;src/text.c:15: set_bkg_data(TEXT_FONT_OFFSET, font_TILE_COUNT, font_tiles);
      00002C 11r00r00               109 	ld	de, #_font_tiles
      00002F D5                     110 	push	de
      000030 21 D0 2E               111 	ld	hl, #0x2ed0
      000033 E5                     112 	push	hl
      000034 CDr00r00               113 	call	_set_bkg_data
                                    114 ;src/text.c:16: }
      000037 E8 0C                  115 	add	sp, #12
      000039 C9                     116 	ret
                                    117 ;src/text.c:19: BANKREF(text_print_char_bkg)
                                    118 ;	---------------------------------
                                    119 ; Function __func_text_print_char_bkg
                                    120 ; ---------------------------------
                           000001   121 	b___func_text_print_char_bkg	= 1
      00003A                        122 ___func_text_print_char_bkg::
                                    123 	.local b___func_text_print_char_bkg 
                           000001   124 	___bank_text_print_char_bkg = b___func_text_print_char_bkg 
                                    125 	.globl ___bank_text_print_char_bkg 
                                    126 ;src/text.c:20: void text_print_char_bkg(UINT8 x, UINT8 y, unsigned char chr) BANKED
                                    127 ;	---------------------------------
                                    128 ; Function text_print_char_bkg
                                    129 ; ---------------------------------
                           000001   130 	b_text_print_char_bkg	= 1
      00003A                        131 _text_print_char_bkg::
      00003A 3B                     132 	dec	sp
                                    133 ;src/text.c:22: UINT8 tile = _TEXT_CHAR_TOFU;
      00003B F8 00                  134 	ldhl	sp,	#0
      00003D 36 FD                  135 	ld	(hl), #0xfd
                                    136 ;src/text.c:23: if (chr >= 'a' && chr <= 'z') {
      00003F F8 09                  137 	ldhl	sp,	#9
      000041 7E                     138 	ld	a, (hl)
      000042 D6 61                  139 	sub	a, #0x61
      000044 38 0E                  140 	jr	C, 00121$
      000046 3E 7A                  141 	ld	a, #0x7a
      000048 96                     142 	sub	a, (hl)
      000049 38 09                  143 	jr	C, 00121$
                                    144 ;src/text.c:24: tile = _TEXT_CHAR_A + chr - 'a';
      00004B 7E                     145 	ld	a, (hl)
      00004C C6 6F                  146 	add	a, #0x6f
      00004E F8 00                  147 	ldhl	sp,	#0
      000050 77                     148 	ld	(hl), a
      000051 C3r00r01               149 	jp	00122$
      000054                        150 00121$:
                                    151 ;src/text.c:25: } else if (chr >= 'A' && chr <= 'Z') {
      000054 F8 09                  152 	ldhl	sp,	#9
      000056 7E                     153 	ld	a, (hl)
      000057 D6 41                  154 	sub	a, #0x41
      000059 38 0E                  155 	jr	C, 00117$
      00005B 3E 5A                  156 	ld	a, #0x5a
      00005D 96                     157 	sub	a, (hl)
      00005E 38 09                  158 	jr	C, 00117$
                                    159 ;src/text.c:26: tile = _TEXT_CHAR_A + chr - 'A';
      000060 7E                     160 	ld	a, (hl)
      000061 C6 8F                  161 	add	a, #0x8f
      000063 F8 00                  162 	ldhl	sp,	#0
      000065 77                     163 	ld	(hl), a
      000066 C3r00r01               164 	jp	00122$
      000069                        165 00117$:
                                    166 ;src/text.c:27: } else if (chr >= '0' && chr <= '9') {
      000069 F8 09                  167 	ldhl	sp,	#9
      00006B 7E                     168 	ld	a, (hl)
      00006C D6 30                  169 	sub	a, #0x30
      00006E 38 0E                  170 	jr	C, 00113$
      000070 3E 39                  171 	ld	a, #0x39
      000072 96                     172 	sub	a, (hl)
      000073 38 09                  173 	jr	C, 00113$
                                    174 ;src/text.c:28: tile = _TEXT_CHAR_0 + chr - '0';
      000075 7E                     175 	ld	a, (hl)
      000076 C6 BA                  176 	add	a, #0xba
      000078 F8 00                  177 	ldhl	sp,	#0
      00007A 77                     178 	ld	(hl), a
      00007B C3r00r01               179 	jp	00122$
      00007E                        180 00113$:
                                    181 ;src/text.c:30: switch (chr) {
      00007E F8 09                  182 	ldhl	sp,	#9
      000080 7E                     183 	ld	a, (hl)
      000081 D6 20                  184 	sub	a, #0x20
      000083 28 77                  185 	jr	Z, 00110$
      000085 F8 09                  186 	ldhl	sp,	#9
      000087 7E                     187 	ld	a, (hl)
      000088 D6 21                  188 	sub	a, #0x21
      00008A 28 58                  189 	jr	Z, 00106$
      00008C F8 09                  190 	ldhl	sp,	#9
      00008E 7E                     191 	ld	a, (hl)
      00008F D6 27                  192 	sub	a, #0x27
      000091 28 33                  193 	jr	Z, 00101$
      000093 F8 09                  194 	ldhl	sp,	#9
      000095 7E                     195 	ld	a, (hl)
      000096 D6 28                  196 	sub	a, #0x28
      000098 28 56                  197 	jr	Z, 00108$
      00009A F8 09                  198 	ldhl	sp,	#9
      00009C 7E                     199 	ld	a, (hl)
      00009D D6 29                  200 	sub	a, #0x29
      00009F 28 55                  201 	jr	Z, 00109$
      0000A1 F8 09                  202 	ldhl	sp,	#9
      0000A3 7E                     203 	ld	a, (hl)
      0000A4 D6 2C                  204 	sub	a, #0x2c
      0000A6 28 30                  205 	jr	Z, 00104$
      0000A8 F8 09                  206 	ldhl	sp,	#9
      0000AA 7E                     207 	ld	a, (hl)
      0000AB D6 2D                  208 	sub	a, #0x2d
      0000AD 28 1D                  209 	jr	Z, 00102$
      0000AF F8 09                  210 	ldhl	sp,	#9
      0000B1 7E                     211 	ld	a, (hl)
      0000B2 D6 2E                  212 	sub	a, #0x2e
      0000B4 28 1C                  213 	jr	Z, 00103$
      0000B6 F8 09                  214 	ldhl	sp,	#9
      0000B8 7E                     215 	ld	a, (hl)
      0000B9 D6 3A                  216 	sub	a, #0x3a
      0000BB 28 21                  217 	jr	Z, 00105$
      0000BD F8 09                  218 	ldhl	sp,	#9
      0000BF 7E                     219 	ld	a, (hl)
      0000C0 D6 3F                  220 	sub	a, #0x3f
      0000C2 28 26                  221 	jr	Z, 00107$
      0000C4 18 3A                  222 	jr	00122$
                                    223 ;src/text.c:31: case '\'':
      0000C6                        224 00101$:
                                    225 ;src/text.c:32: tile = _TEXT_CHAR_APOSTROPHE;
      0000C6 F8 00                  226 	ldhl	sp,	#0
      0000C8 36 F4                  227 	ld	(hl), #0xf4
                                    228 ;src/text.c:33: break;
      0000CA 18 34                  229 	jr	00122$
                                    230 ;src/text.c:34: case '-':
      0000CC                        231 00102$:
                                    232 ;src/text.c:35: tile = _TEXT_CHAR_DASH;
      0000CC F8 00                  233 	ldhl	sp,	#0
      0000CE 36 F5                  234 	ld	(hl), #0xf5
                                    235 ;src/text.c:36: break;
      0000D0 18 2E                  236 	jr	00122$
                                    237 ;src/text.c:37: case '.':
      0000D2                        238 00103$:
                                    239 ;src/text.c:38: tile = _TEXT_CHAR_DOT;
      0000D2 F8 00                  240 	ldhl	sp,	#0
      0000D4 36 F6                  241 	ld	(hl), #0xf6
                                    242 ;src/text.c:39: break;
      0000D6 18 28                  243 	jr	00122$
                                    244 ;src/text.c:40: case ',':
      0000D8                        245 00104$:
                                    246 ;src/text.c:41: tile = _TEXT_CHAR_COMMA;
      0000D8 F8 00                  247 	ldhl	sp,	#0
      0000DA 36 F7                  248 	ld	(hl), #0xf7
                                    249 ;src/text.c:42: break;
      0000DC 18 22                  250 	jr	00122$
                                    251 ;src/text.c:43: case ':':
      0000DE                        252 00105$:
                                    253 ;src/text.c:44: tile = _TEXT_CHAR_COLON;
      0000DE F8 00                  254 	ldhl	sp,	#0
      0000E0 36 F8                  255 	ld	(hl), #0xf8
                                    256 ;src/text.c:45: break;
      0000E2 18 1C                  257 	jr	00122$
                                    258 ;src/text.c:46: case '!':
      0000E4                        259 00106$:
                                    260 ;src/text.c:47: tile = _TEXT_CHAR_EXCLAMATION;
      0000E4 F8 00                  261 	ldhl	sp,	#0
      0000E6 36 F9                  262 	ld	(hl), #0xf9
                                    263 ;src/text.c:48: break;
      0000E8 18 16                  264 	jr	00122$
                                    265 ;src/text.c:49: case '?':
      0000EA                        266 00107$:
                                    267 ;src/text.c:50: tile = _TEXT_CHAR_INTERROGATION;
      0000EA F8 00                  268 	ldhl	sp,	#0
      0000EC 36 FA                  269 	ld	(hl), #0xfa
                                    270 ;src/text.c:51: break;
      0000EE 18 10                  271 	jr	00122$
                                    272 ;src/text.c:52: case '(':
      0000F0                        273 00108$:
                                    274 ;src/text.c:53: tile = _TEXT_CHAR_LPARENTHESES;
      0000F0 F8 00                  275 	ldhl	sp,	#0
      0000F2 36 FB                  276 	ld	(hl), #0xfb
                                    277 ;src/text.c:54: break;
      0000F4 18 0A                  278 	jr	00122$
                                    279 ;src/text.c:55: case ')':
      0000F6                        280 00109$:
                                    281 ;src/text.c:56: tile = _TEXT_CHAR_RPARENTHESES;
      0000F6 F8 00                  282 	ldhl	sp,	#0
      0000F8 36 FC                  283 	ld	(hl), #0xfc
                                    284 ;src/text.c:57: break;
      0000FA 18 04                  285 	jr	00122$
                                    286 ;src/text.c:58: case ' ':
      0000FC                        287 00110$:
                                    288 ;src/text.c:59: tile = _TEXT_CHAR_SPACE;
      0000FC F8 00                  289 	ldhl	sp,	#0
      0000FE 36 FF                  290 	ld	(hl), #0xff
                                    291 ;src/text.c:61: }
      000100                        292 00122$:
                                    293 ;src/text.c:63: set_bkg_tiles(x, y, 1, 1, &tile);
      000100 F8 00                  294 	ldhl	sp,	#0
      000102 E5                     295 	push	hl
      000103 21 01 01               296 	ld	hl, #0x101
      000106 E5                     297 	push	hl
      000107 F8 0C                  298 	ldhl	sp,	#12
      000109 3A                     299 	ld	a, (hl-)
      00010A 57                     300 	ld	d, a
      00010B 5E                     301 	ld	e, (hl)
      00010C D5                     302 	push	de
      00010D CDr00r00               303 	call	_set_bkg_tiles
                                    304 ;src/text.c:64: }
      000110 E8 07                  305 	add	sp, #7
      000112 C9                     306 	ret
                                    307 ;src/text.c:68: BANKREF(text_print_string_bkg)
                                    308 ;	---------------------------------
                                    309 ; Function __func_text_print_string_bkg
                                    310 ; ---------------------------------
                           000001   311 	b___func_text_print_string_bkg	= 1
      000113                        312 ___func_text_print_string_bkg::
                                    313 	.local b___func_text_print_string_bkg 
                           000001   314 	___bank_text_print_string_bkg = b___func_text_print_string_bkg 
                                    315 	.globl ___bank_text_print_string_bkg 
                                    316 ;src/text.c:69: void text_print_string_bkg(UINT8 x, UINT8 y, unsigned char *string) BANKED
                                    317 ;	---------------------------------
                                    318 ; Function text_print_string_bkg
                                    319 ; ---------------------------------
                           000001   320 	b_text_print_string_bkg	= 1
      000113                        321 _text_print_string_bkg::
      000113 3B                     322 	dec	sp
      000114 3B                     323 	dec	sp
                                    324 ;src/text.c:71: UINT8 offset_x = 0;
                                    325 ;src/text.c:72: UINT8 offset_y = 0;
      000115 01 00 00               326 	ld	bc, #0x0
                                    327 ;src/text.c:74: while (string[0]) {
      000118 F8 0A                  328 	ldhl	sp,	#10
      00011A 2A                     329 	ld	a, (hl+)
      00011B 5F                     330 	ld	e, a
      00011C 56                     331 	ld	d, (hl)
      00011D                        332 00104$:
      00011D 1A                     333 	ld	a, (de)
      00011E F8 00                  334 	ldhl	sp,	#0
                                    335 ;src/text.c:75: if (string[0] == '\n') {
      000120 77                     336 	ld	(hl),a
      000121 B7                     337 	or	a,a
      000122 28 31                  338 	jr	Z, 00107$
                                    339 ;src/text.c:76: offset_x = 0;
      000124 D6 0A                  340 	sub	a,#0x0a
      000126 20 04                  341 	jr	NZ, 00102$
      000128 4F                     342 	ld	c,a
                                    343 ;src/text.c:77: offset_y += 1;
      000129 04                     344 	inc	b
      00012A 18 26                  345 	jr	00103$
      00012C                        346 00102$:
                                    347 ;src/text.c:79: text_print_char_bkg(x + offset_x, y + offset_y, (unsigned char) string[0]);
      00012C F8 09                  348 	ldhl	sp,	#9
      00012E 7E                     349 	ld	a, (hl)
      00012F 80                     350 	add	a, b
      000130 F8 01                  351 	ldhl	sp,	#1
      000132 77                     352 	ld	(hl), a
      000133 F8 08                  353 	ldhl	sp,	#8
      000135 7E                     354 	ld	a, (hl)
      000136 81                     355 	add	a, c
      000137 C5                     356 	push	bc
      000138 D5                     357 	push	de
      000139 F8 04                  358 	ldhl	sp,	#4
      00013B 66                     359 	ld	h, (hl)
                                    360 ;	spillPairReg hl
                                    361 ;	spillPairReg hl
      00013C E5                     362 	push	hl
      00013D 33                     363 	inc	sp
      00013E F8 06                  364 	ldhl	sp,	#6
      000140 66                     365 	ld	h, (hl)
                                    366 ;	spillPairReg hl
                                    367 ;	spillPairReg hl
      000141 E5                     368 	push	hl
      000142 33                     369 	inc	sp
      000143 F5                     370 	push	af
      000144 33                     371 	inc	sp
      000145 1Er00                  372 	ld	e, #b_text_print_char_bkg
      000147 21r3Ar00               373 	ld	hl, #_text_print_char_bkg
      00014A CDr00r00               374 	call	___sdcc_bcall_ehl
      00014D E8 03                  375 	add	sp, #3
      00014F D1                     376 	pop	de
      000150 C1                     377 	pop	bc
                                    378 ;src/text.c:80: offset_x += 1;
      000151 0C                     379 	inc	c
      000152                        380 00103$:
                                    381 ;src/text.c:82: string += 1;  // Increment pointer address, /!\ THIS IS DANGEROUS!
      000152 13                     382 	inc	de
      000153 18 C8                  383 	jr	00104$
      000155                        384 00107$:
                                    385 ;src/text.c:84: }
      000155 33                     386 	inc	sp
      000156 33                     387 	inc	sp
      000157 C9                     388 	ret
                                    389 	.area _CODE_1
                                    390 	.area _INITIALIZER
                                    391 	.area _CABS (ABS)
